name: CI
on:
  - push
  - pull_request
env:
  JULIA_NUM_THREADS: 2
jobs:
  # test:
  #   name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       version:
  #         - '1.10'
  #       os:
  #         - ubuntu-latest
  #         - macOS-latest
  #         - windows-latest
  #       arch:
  #         - x64
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: julia-actions/setup-julia@v1
  #       with:
  #         version: ${{ matrix.version }}
  #         arch: ${{ matrix.arch }}
  #         include-all-prereleases: true
  #     - uses: actions/cache@v3
  #       env:
  #         cache-name: cache-artifacts
  #       with:
  #         path: ~/.julia/artifacts
  #         key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-test-${{ env.cache-name }}-
  #           ${{ runner.os }}-test-
  #           ${{ runner.os }}-
  #     - uses: julia-actions/julia-buildpkg@latest
  #     - uses: julia-actions/julia-runtest@latest
  #     - uses: julia-actions/julia-processcoverage@v1
  #     - uses: codecov/codecov-action@v4
  #       with:
  #         file: lcov.info
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         fail_ci_if_error: false  # or true if you want CI to fail when Codecov fails
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: "1"
      - uses: julia-actions/cache@v2
      - name: Install dependencies
        run: julia --project=docs/ -e '
          using Pkg;
          Pkg.develop(PackageSpec(path=pwd()));
          using Documenter
          using Bramble
          Pkg.instantiate()'
      - name: Build and deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # If authenticating with GitHub Actions token
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }} # If authenticating with SSH deploy key
        run: julia --project=docs/ docs/make.jl
  # doctests:
  #   name: Doctests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: julia-actions/setup-julia@v2
  #       with:
  #         version: "1"
  #     - run: julia --color=yes -e 'using Pkg; VERSION >= v"1.5-" && !isdir(joinpath(DEPOT_PATH[1], "registries", "General")) && Pkg.Registry.add("General")'
  #       shell: bash
  #       env:
  #         JULIA_PKG_SERVER: ""
  #     - run: |
  #         julia --project=docs -e '
  #           using Pkg
  #           Pkg.develop(PackageSpec(path=pwd()))
  #           Pkg.instantiate()'
  #     - run: |
  #         julia --project=docs -e '
  #           using Documenter: doctest
  #           using Bramble
  #           doctest(Bramble)'
