var documenterSearchIndex = {"docs":
[{"location":"#Bramble.jl","page":"Home","title":"Bramble.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation is for Bramble.jl, a Julia library implementing discretization methods to solve partial differential equations using finite differences on nonuniform grids.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more information on the types of discretizations encompassed by Bramble.jl, please consult the papers","category":"page"},{"location":"","page":"Home","title":"Home","text":"J. A. Ferreira and R. D. Grigorieff, On the supraconvergence of elliptic finite difference schemes, Applied Numerical Mathematics 28 (1998), pp. 275-292\nS. Barbeiro, J. A. Ferreira and R. D. Grigorieff, Supraconvergence of a finite difference scheme for solutions in H^s(0L), IMA Journal of Numerical Analysis 25.4 (2005), pp. 797–811\nJ. A. Ferreira and R. D. Grigorieff, Supraconvergence and Supercloseness of a Scheme for Elliptic Equations on Nonuniform Grids, Numerical Functional Analysis and Optimization 27.5-6 (2006), pp. 539–564","category":"page"},{"location":"internals/","page":"API documentation","title":"API documentation","text":"CollapsedDocStrings = false","category":"page"},{"location":"internals/#API-documentation","page":"API documentation","title":"API documentation","text":"","category":"section"},{"location":"internals/","page":"API documentation","title":"API documentation","text":"Documentation for Bramble.jl's public API.","category":"page"},{"location":"internals/#Geometry","page":"API documentation","title":"Geometry","text":"","category":"section"},{"location":"internals/","page":"API documentation","title":"API documentation","text":"Interval\n×\nmarkers\nDomain","category":"page"},{"location":"internals/#Bramble.Interval","page":"API documentation","title":"Bramble.Interval","text":"Interval(x, y)\n\n\nCreates an interval set from two scalars x and y.\n\nFields\n\nx – the lower bound\ny – the upper bound\n\nExample\n\njulia> Interval(0.0, 1.0)\nCartesianProduct{1,Float64}((0.0,1.0))\n\n\n\n\n\n","category":"function"},{"location":"internals/#Bramble.:×","page":"API documentation","title":"Bramble.:×","text":"×(X, Y)\n\n\nCompute the Cartesian product of two Cartesian products X and Y.\n\nFields\n\nX – the first Cartesian product\nY – the second Cartesian product\n\nExample\n\njulia> X = CartesianProduct(0.0, 1.0);\n\t   Y = CartesianProduct(2.0, 3.0);\n\t   X × Y;\nCartesianProduct{2,Float64}(((0.0, 2.0), (0.0, 3.0)), ((1.0, 2.0), (1.0, 3.0)))\n\n\n\n\n\n","category":"function"},{"location":"internals/#Bramble.markers","page":"API documentation","title":"Bramble.markers","text":"markers(p...)\n\nConverts pairs of Pair{String, Function} into a Tuple{Marker}.\n\n\n\n\n\nmarkers(domain)\n\nReturns the markers associated with a domain.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Bramble.Domain","page":"API documentation","title":"Bramble.Domain","text":"struct Domain{SetType, MarkersType}\n\nRepresents a domain with a set and a set of markers.\n\nInputs:\nset::SetType, the set represented by the domain.\nmarkers::MarkersType, the markers associated with the domain.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Mesh","page":"API documentation","title":"Mesh","text":"","category":"section"},{"location":"internals/","page":"API documentation","title":"API documentation","text":"Modules = [Bramble]\nPrivate = false\nOrder   = [:function]\nPages = [\"common.jl\", \"mesh1d.jl\", \"meshnd.jl\"]","category":"page"},{"location":"internals/#Bramble.ndofs-Tuple{Bramble.MeshType}","page":"API documentation","title":"Bramble.ndofs","text":"ndofs(mesh::MeshType)\n\nReturn the number of points in the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.Mesh-Union{Tuple{MarkersType}, Tuple{T}, Tuple{Domain{Bramble.CartesianProduct{1, T}, MarkersType}, Int64, Bool}} where {T, MarkersType}","page":"API documentation","title":"Bramble.Mesh","text":"Mesh(domain::Domain{CartesianProduct{1,T}, MarkersType}, npts::Int, unif::Bool) where {T, MarkersType}\n\nCreate a 1D mesh based on domain and npts with uniform spacing if unif is true (otherwise, the points are randomly generated).\n\n#Example\n\njulia> mesh = Mesh(Domain(I), 10, true);\nI = Interval(0,1);\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.Mesh-Union{Tuple{Markers}, Tuple{T}, Tuple{Domain{Bramble.CartesianProduct{1, T}, Markers}, Tuple{Int64}, Tuple{Bool}}} where {T, Markers}","page":"API documentation","title":"Bramble.Mesh","text":"Mesh(domain::Domain{CartesianProduct{1,T}, MarkersType}, npts::NTuple{1,Int}, uniform::NTuple{1,Bool}) where {T, MarkersType}\n\nCreate a 1D mesh based on domain and npts with uniform spacing if unif is true (otherwise, the points are randomly generated).\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hₘₐₓ-Tuple{Bramble.Mesh1D}","page":"API documentation","title":"Bramble.hₘₐₓ","text":"hₘₐₓ(mesh::Mesh1D)\n\nCompute the maximum of the space step sizes in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.points-Tuple{Bramble.Mesh1D, Any}","page":"API documentation","title":"Bramble.points","text":"points(mesh::Mesh1D, i)\n\nReturn the point at index i.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.points-Tuple{Bramble.Mesh1D}","page":"API documentation","title":"Bramble.points","text":"points(mesh::Mesh1D)\n\nReturn a vector of all points in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.Mesh-Union{Tuple{D}, Tuple{Domain, Tuple{Vararg{Int64, D}}, Tuple{Vararg{Bool, D}}}} where D","page":"API documentation","title":"Bramble.Mesh","text":"Mesh(domain, npts, unif)\n\nCreate a cartesian nD-mesh from the domain domain. The number of points for each projection mesh are given in the tuple npts. The distribution of points on the submeshes are encoded in the tuple unif. The mesh is defined by the markers in markers, which stores which indices correspond to which marker.\n\nExample\n\njulia> mesh = Mesh(domain, (10, 15), (true, true))\ndomain = Domain(Interval(0,1) × Interval(4,5))\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hₘₐₓ-Union{Tuple{Bramble.MeshnD{D, T}}, Tuple{T}, Tuple{D}} where {D, T}","page":"API documentation","title":"Bramble.hₘₐₓ","text":"hₘₐₓ(mesh)\n\nReturn the maximum diagonal of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.points-Union{Tuple{Bramble.MeshnD{D}}, Tuple{D}} where D","page":"API documentation","title":"Bramble.points","text":"points(mesh)\n\nReturn the points of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.points-Union{Tuple{D}, Tuple{Bramble.MeshnD{D}, Tuple{Vararg{Int64, D}}}} where D","page":"API documentation","title":"Bramble.points","text":"points(mesh, idx)\n\nReturn the point at index idx in the mesh.\n\n\n\n\n\n","category":"method"}]
}
