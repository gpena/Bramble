var documenterSearchIndex = {"docs":
[{"location":"#Bramble.jl-Documentation","page":"Home","title":"Bramble.jl Documentation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CollapsedDocStrings = true","category":"page"},{"location":"internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/#Geometry","page":"Internals","title":"Geometry","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [Bramble]\nPages = [\"sets.jl\", \"domains.jl\"]","category":"page"},{"location":"internals/#Bramble.CartesianProduct","page":"Internals","title":"Bramble.CartesianProduct","text":"Stores a Cartesian product of D intervals with elements of type T.\n\nFields\n\ndata – a D-tuple containing the coordinate projections.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Base.eltype-Union{Tuple{Bramble.CartesianProduct{D, T}}, Tuple{T}, Tuple{D}} where {D, T}","page":"Internals","title":"Base.eltype","text":"eltype(_)\n\n\nGet the element type of a Cartesian product.\n\nFields\n\nX – the Cartesian product\n\nExample\n\njulia> eltype(CartesianProduct(0.0, 1.0))\nFloat64\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.show-Union{Tuple{D}, Tuple{IO, Bramble.CartesianProduct{D}}} where D","page":"Internals","title":"Base.show","text":"show(io::IO, X::CartesianProduct{D})\n\nPrint a human-readable representation of a Cartesian product X.\n\nExample\n\njulia> X = CartesianProduct(0.0, 1.0);\n\t   show(X);\nType: CartesianProduct{1,Float64}((0.0,1.0))\n Dim: 1\n Set: [0.0, 1.0]\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.:×-Union{Tuple{T}, Tuple{D2}, Tuple{D1}, Tuple{Bramble.CartesianProduct{D1, T}, Bramble.CartesianProduct{D2, T}}} where {D1, D2, T}","page":"Internals","title":"Bramble.:×","text":"×(X, Y)\n\n\nCompute the Cartesian product of two Cartesian products X and Y.\n\nFields\n\nX – the first Cartesian product\nY – the second Cartesian product\n\nExample\n\njulia> X = CartesianProduct(0.0, 1.0);\n\t   Y = CartesianProduct(2.0, 3.0);\n\t   X × Y;\nCartesianProduct{2,Float64}(((0.0, 2.0), (0.0, 3.0)), ((1.0, 2.0), (1.0, 3.0)))\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.Interval-Tuple{Any, Any}","page":"Internals","title":"Bramble.Interval","text":"Interval(x, y)\n\n\nCreates an interval set from two scalars x and y.\n\nFields\n\nx – the lower bound\ny – the upper bound\n\nExample\n\njulia> Interval(0.0, 1.0)\nCartesianProduct{1,Float64}((0.0,1.0))\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Union{Tuple{Bramble.CartesianProduct{D}}, Tuple{D}} where D","page":"Internals","title":"Bramble.dim","text":"dim(_)\n\n\nGet the topological dimension of a Cartesian product.\n\nFields\n\nX – the Cartesian product\n\nExample\n\njulia> dim(CartesianProduct(0.0, 1.0))\n1\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.projection-Tuple{Bramble.CartesianProduct, Any}","page":"Internals","title":"Bramble.projection","text":"projection(X::CartesianProduct, i)\n\nGet the i-th set in the Cartesian product X as an Interval.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.Domain","page":"Internals","title":"Bramble.Domain","text":"struct Domain{SetType, MarkersType}\n\nRepresents a domain with a set and a set of markers.\n\nInputs:\nset::SetType, the set represented by the domain.\nmarkers::MarkersType, the markers associated with the domain.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Bramble.Domain-Tuple{Bramble.CartesianProduct}","page":"Internals","title":"Bramble.Domain","text":"The Domain type represents a domain with a set and a set of markers.\n\nThe default marker for a domain is a \"Dirichlet\" marker with a function f(x) = 0.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.DomainBaseType","page":"Internals","title":"Bramble.DomainBaseType","text":"DomainBaseType\n\nAn abstract type representing a domain with a set and a set of markers.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Bramble.Marker","page":"Internals","title":"Bramble.Marker","text":"struct Marker{F<:Function}\n\nRepresents a marker function.\n\nInputs:\n`label::String``, the label associated with the marker.\n`f::F``, The function associated with the marker.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Bramble.MarkerType","page":"Internals","title":"Bramble.MarkerType","text":"MarkerType{F}\n\nRepresents a type that can be used to represent a marker function. This is a Pair{String, F} where the first element of the pair is the label associated with the marker and the second is the function associated with the marker.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Base.eltype-Tuple{Domain}","page":"Internals","title":"Base.eltype","text":"eltype(domain)\n\nReturns the element type of a domain.\n\nExample\n\njulia> eltype(Domain(I × I))\nFloat64```\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.show-Tuple{IO, Domain}","page":"Internals","title":"Base.show","text":"show(io, domain)\n\nPrints a domain to io. The output will show the set of the domain, and the labels of the markers.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Tuple{Bramble.DomainBaseType}","page":"Internals","title":"Bramble.dim","text":"dim(domain)\n\nReturns the dimension of a domain.\n\nExample\n\njulia> I = Interval(0.0, 1.0);\n\t   dim(Domain(I × I));\n2\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.labels-Tuple{Domain}","page":"Internals","title":"Bramble.labels","text":"labels(domain)\n\nReturns the labels of the markers associated with a domain.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.markerfuncs-Tuple{Domain}","page":"Internals","title":"Bramble.markerfuncs","text":"markerfuncs(domain)\n\nReturns the marker functions associated with a domain.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.markers-Tuple{Domain}","page":"Internals","title":"Bramble.markers","text":"markers(domain)\n\nReturns the markers associated with a domain.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.markers-Tuple{Vararg{Pair{String}}}","page":"Internals","title":"Bramble.markers","text":"markers(p...)\n\nConverts pairs of Pair{String, Function} into a Tuple{Marker}.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.projection-Tuple{Domain, Int64}","page":"Internals","title":"Bramble.projection","text":"projection(domain, i)\n\nReturns the ith projection of a domain. For example, projection(Domain(I × I), 1) will return I.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.set-Tuple{Domain}","page":"Internals","title":"Bramble.set","text":"set(domain)\n\nReturns the set associated with a domain.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Mesh","page":"Internals","title":"Mesh","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [Bramble]\nPages = [\"common.jl\", \"mesh1d.jl\", \"meshnd.jl\"]","category":"page"},{"location":"internals/#Base.eltype-Tuple{Bramble.MeshType}","page":"Internals","title":"Base.eltype","text":"eltype(mesh::MeshType)\n\nReturn the type of the points in the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Union{Tuple{Bramble.MeshType{D}}, Tuple{D}} where D","page":"Internals","title":"Bramble.dim","text":"dim(mesh::MeshType)\n\nReturn the dimension of the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.indices-Union{Tuple{Bramble.MeshType{D}}, Tuple{D}} where D","page":"Internals","title":"Bramble.indices","text":"indices(mesh::MeshType)\n\nReturn the indices of the points in the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.marker-Tuple{Bramble.MeshType, Any}","page":"Internals","title":"Bramble.marker","text":"marker(mesh::MeshType, m)\n\nReturn the indices of the points in the mesh that have the marker m\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.ndofs-Tuple{Bramble.MeshType}","page":"Internals","title":"Bramble.ndofs","text":"ndofs(mesh::MeshType)\n\nReturn the number of points in the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.Mesh1D","page":"Internals","title":"Bramble.Mesh1D","text":"Mesh1D{T}(markers, indices, pts, npts)\n\nCreate a 1D mesh with `npts` points of type `T`. The points that define the mesh are \nstored in `pts` and are identified, following the same order, with the\nindices in `indices`. The mesh is defined by the markers in `markers`, \nwhich stores which indices correspond to which marker.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Bramble.Mesh1D-Tuple{Any}","page":"Internals","title":"Bramble.Mesh1D","text":"(mesh::Mesh1D)()\n\nReturn the mesh itself.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.eltype-Union{Tuple{Bramble.Mesh1D{T}}, Tuple{T}} where T","page":"Internals","title":"Base.eltype","text":"eltype(mesh::Mesh1D{T})\n\nReturn the type of the points in mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.eltype-Union{Tuple{Type{<:Bramble.Mesh1D{T}}}, Tuple{T}} where T","page":"Internals","title":"Base.eltype","text":"eltype(mesh::Mesh1D)\n\nReturn the type of the points in the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.show-Tuple{IO, Bramble.Mesh1D}","page":"Internals","title":"Base.show","text":"show(io::IO, mesh::Mesh1D)\n\nPrint a summary of the mesh to io.\n\nExample\n\njulia> mesh\nI = Interval(0,1);\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.Mesh-Union{Tuple{MarkersType}, Tuple{T}, Tuple{Domain{Bramble.CartesianProduct{1, T}, MarkersType}, Int64, Bool}} where {T, MarkersType}","page":"Internals","title":"Bramble.Mesh","text":"Mesh(domain::Domain{CartesianProduct{1,T}, MarkersType}, npts::Int, unif::Bool) where {T, MarkersType}\n\nCreate a 1D mesh based on domain and npts with uniform spacing if unif is true (otherwise, the points are randomly generated).\n\n#Example\n\njulia> mesh = Mesh(Domain(I), 10, true);\nI = Interval(0,1);\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.Mesh-Union{Tuple{Markers}, Tuple{T}, Tuple{Domain{Bramble.CartesianProduct{1, T}, Markers}, Tuple{Int64}, Tuple{Bool}}} where {T, Markers}","page":"Internals","title":"Bramble.Mesh","text":"Mesh(domain::Domain{CartesianProduct{1,T}, MarkersType}, npts::NTuple{1,Int}, uniform::NTuple{1,Bool}) where {T, MarkersType}\n\nCreate a 1D mesh based on domain and npts with uniform spacing if unif is true (otherwise, the points are randomly generated).\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.addmarkers!-Tuple{Dict{String, Set{CartesianIndex{1}}}, Domain, CartesianIndices{1, R} where R<:Tuple{OrdinalRange{Int64, Int64}}, Any}","page":"Internals","title":"Bramble.addmarkers!","text":"addmarkers!(mrks::MeshMarkers{1}, domain::Domain, R::CartesianIndices{1}, pts)\n\nAdd markers to the mesh based on the domain.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.bcindices-Tuple{Bramble.Mesh1D}","page":"Internals","title":"Bramble.bcindices","text":"bcindices(mesh::Mesh1D)\n\nCompute the boundary indices of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.bcindices-Tuple{CartesianIndices{1, R} where R<:Tuple{OrdinalRange{Int64, Int64}}}","page":"Internals","title":"Bramble.bcindices","text":"bcindices(R::CartesianIndices{1})\n\nCompute the boundary indices of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.create_mesh1d_basics-Tuple{Domain, Int64, Bool}","page":"Internals","title":"Bramble.create_mesh1d_basics","text":"create_mesh1d_basics(domain::Domain, npts::Int, unif::Bool)\n\nCreate the basic components of a 1D mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.createpoints!-Union{Tuple{T}, Tuple{Vector{T}, Bramble.CartesianProduct{1, T}, Int64, Bool}} where T","page":"Internals","title":"Bramble.createpoints!","text":"createpoints!(x::Vector{T}, I::CartesianProduct{1,T}, npts::Int, unif::Bool) where T\n\nCreate a vector of points x uniformly or randomly distributed in the interval I.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Union{Tuple{Bramble.Mesh1D{T}}, Tuple{T}} where T","page":"Internals","title":"Bramble.dim","text":"dim(mesh::Mesh1D{T})\n\nReturn the topologicaldimension of the domain associated with mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Union{Tuple{Type{<:Bramble.Mesh1D{T}}}, Tuple{T}} where T","page":"Internals","title":"Bramble.dim","text":"dim(mesh::Mesh1D)\n\nReturn the topological dimension of the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.generate_indices-Tuple{Int64}","page":"Internals","title":"Bramble.generate_indices","text":"generate_indices(npts::Int)\n\nGenerate a CartesianIndices object for a 1D array of length npts.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hmean-Union{Tuple{T}, Tuple{Bramble.Mesh1D{T}, Any}} where T","page":"Internals","title":"Bramble.hmean","text":"hmean(mesh::Mesh1D{T}, i)\n\nCompute the mean of the space step size at index i in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hmeanit-Tuple{Bramble.Mesh1D}","page":"Internals","title":"Bramble.hmeanit","text":"hmeanit(mesh::Mesh1D)\n\nReturn an iterator over all mean space step sizes in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hspace-Tuple{Bramble.Mesh1D, Any}","page":"Internals","title":"Bramble.hspace","text":"hspace(mesh::Mesh1D, i)\n\nCompute the space step size at index i in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hspaceit-Tuple{Bramble.Mesh1D}","page":"Internals","title":"Bramble.hspaceit","text":"hspaceit(mesh::Mesh1D)\n\nReturn an iterator over all space step sizes in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hₘₐₓ-Tuple{Bramble.Mesh1D}","page":"Internals","title":"Bramble.hₘₐₓ","text":"hₘₐₓ(mesh::Mesh1D)\n\nCompute the maximum of the space step sizes in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.intindices-Tuple{Bramble.Mesh1D}","page":"Internals","title":"Bramble.intindices","text":"intindices(mesh::Mesh1D)\n\nCompute the interior indices of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.intindices-Tuple{CartesianIndices{1, R} where R<:Tuple{OrdinalRange{Int64, Int64}}}","page":"Internals","title":"Bramble.intindices","text":"intindices(R::CartesianIndices{1})\n\nCompute the interior indices of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.meas_cell-Tuple{Bramble.Mesh1D, CartesianIndex{1}}","page":"Internals","title":"Bramble.meas_cell","text":"meas_cell(mesh::Mesh1D, idx::CartesianIndex{1})\n\nCompute the measure of the cell at index idx in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.meas_cellit-Tuple{Bramble.Mesh1D}","page":"Internals","title":"Bramble.meas_cellit","text":"meas_cellit(mesh::Mesh1D)\n\nReturn an iterator over all cell measures in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.npoints-Tuple{Bramble.Mesh1D}","page":"Internals","title":"Bramble.npoints","text":"npoints(mesh::Mesh1D)\n\nReturn a tuple of the number of points in the mesh.\n\n#Example\n\njulia> npoints(mesh)\nI = Interval(0,1);\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.points-Tuple{Bramble.Mesh1D, Any}","page":"Internals","title":"Bramble.points","text":"points(mesh::Mesh1D, i)\n\nReturn the point at index i.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.points-Tuple{Bramble.Mesh1D}","page":"Internals","title":"Bramble.points","text":"points(mesh::Mesh1D)\n\nReturn a vector of all points in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.pointsit-Tuple{Bramble.Mesh1D}","page":"Internals","title":"Bramble.pointsit","text":"pointsit(mesh::Mesh1D)\n\nReturn an iterator over all points in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.xmean-Union{Tuple{T}, Tuple{Bramble.Mesh1D{T}, Any}} where T","page":"Internals","title":"Bramble.xmean","text":"xmean(mesh::Mesh1D{T}, i)\n\nCompute the mean of the points at index i in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.xmeanit-Tuple{Bramble.Mesh1D}","page":"Internals","title":"Bramble.xmeanit","text":"xmeanit(mesh::Mesh1D)\n\nReturn an iterator over all mean points in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.MeshnD","page":"Internals","title":"Bramble.MeshnD","text":"MeshnD{n,T}(markers, indices, pts, npts)\n\nCreate a cartesian nD-mesh with `npts` points. For efficiency,\nthe mesh points are not stored. Instead, we store the points\nof the 1D meshes that make up the nD mesh. To connect both nD and \n1D meshes, we use the indices in `indices`. The mesh is defined \nby the markers in `markers`, which stores which indices \ncorrespond to which marker.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Bramble.MeshnD-Tuple{Any}","page":"Internals","title":"Bramble.MeshnD","text":"mesh(i)\n\nReturn the i-th submesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.eltype-Union{Tuple{Bramble.MeshnD{D, T}}, Tuple{T}, Tuple{D}} where {D, T}","page":"Internals","title":"Base.eltype","text":"eltype(mesh)\n\nReturn the eltype of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.eltype-Union{Tuple{Type{<:Bramble.MeshnD{D, T}}}, Tuple{T}, Tuple{D}} where {D, T}","page":"Internals","title":"Base.eltype","text":"eltype(mesh::MeshnD)\n\nReturn the type of the points in the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.show-Tuple{IO, Bramble.MeshnD}","page":"Internals","title":"Base.show","text":"show(io, mesh)\n\nPrint a description of the mesh to the IO stream io.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.Mesh-Union{Tuple{D}, Tuple{Domain, Tuple{Vararg{Int64, D}}, Tuple{Vararg{Bool, D}}}} where D","page":"Internals","title":"Bramble.Mesh","text":"Mesh(domain, npts, unif)\n\nCreate a cartesian nD-mesh from the domain domain. The number of points for each projection mesh are given in the tuple npts. The distribution of points on the submeshes are encoded in the tuple unif. The mesh is defined by the markers in markers, which stores which indices correspond to which marker.\n\nExample\n\njulia> mesh = Mesh(domain, (10, 15), (true, true))\ndomain = Domain(Interval(0,1) × Interval(4,5))\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.addmarkers!-Union{Tuple{D}, Tuple{Dict{String, Set{CartesianIndex{D}}}, Domain, Tuple{Vararg{Bramble.Mesh1D, D}}}} where D","page":"Internals","title":"Bramble.addmarkers!","text":"addmarkers!(markers, domain, meshes)\n\nAdd the markers of the domain to the markers of the mesh, using the submeshes.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.bcindices-Tuple{Bramble.MeshnD}","page":"Internals","title":"Bramble.bcindices","text":"bcindices(mesh)\n\nReturn the boundary indices of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Union{Tuple{Bramble.MeshnD{D}}, Tuple{D}} where D","page":"Internals","title":"Bramble.dim","text":"dim(mesh)\n\nReturn the dimension of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Union{Tuple{Type{<:Bramble.MeshnD{D, T}}}, Tuple{D}, Tuple{T}} where {T, D}","page":"Internals","title":"Bramble.dim","text":"dim(mesh::MeshnD)\n\nReturn the topological dimension of the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.generate_indices-Union{Tuple{Tuple{Vararg{Int64, D}}}, Tuple{D}} where D","page":"Internals","title":"Bramble.generate_indices","text":"generate_indices(nPoints)\n\nReturn the indices of a mesh with nPoints[i] in each direction.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hmean-Union{Tuple{D}, Tuple{Bramble.MeshnD{D}, Tuple{Vararg{Int64, D}}}} where D","page":"Internals","title":"Bramble.hmean","text":"hmean(mesh, idx)\n\nCompute the mean of the space step sizes at index idx in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hmeanit-Union{Tuple{Bramble.MeshnD{D}}, Tuple{D}} where D","page":"Internals","title":"Bramble.hmeanit","text":"hmeanit(mesh)\n\nReturn an iterator over all mean space step sizes in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hspace-Union{Tuple{D}, Tuple{Bramble.MeshnD{D}, Tuple{Vararg{Int64, D}}}} where D","page":"Internals","title":"Bramble.hspace","text":"hspace(mesh, idx)\n\nCompute the space step size at index idx in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hspaceit-Union{Tuple{Bramble.MeshnD{D}}, Tuple{D}} where D","page":"Internals","title":"Bramble.hspaceit","text":"hspaceit(mesh)\n\nReturn an iterator over all space step sizes in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hₘₐₓ-Union{Tuple{Bramble.MeshnD{D, T}}, Tuple{T}, Tuple{D}} where {D, T}","page":"Internals","title":"Bramble.hₘₐₓ","text":"hₘₐₓ(mesh)\n\nReturn the maximum diagonal of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.intindices-Union{Tuple{CartesianIndices{D, R} where R<:Tuple{Vararg{OrdinalRange{Int64, Int64}, D}}}, Tuple{D}} where D","page":"Internals","title":"Bramble.intindices","text":"intindices(mesh)\n\nReturn the interior indices of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.is_boundary_index-Union{Tuple{D}, Tuple{CartesianIndex{D}, CartesianIndices{D, R} where R<:Tuple{Vararg{OrdinalRange{Int64, Int64}, D}}}} where D","page":"Internals","title":"Bramble.is_boundary_index","text":"is_boundary_index(idx, R)\n\nReturn true if the index idx is a boundary index of the mesh with indices stored in R.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.meas_cell-Union{Tuple{T}, Tuple{D}, Tuple{Bramble.MeshnD{D, T}, CartesianIndex{D}}} where {D, T}","page":"Internals","title":"Bramble.meas_cell","text":"meas_cell(mesh, idx)\n\nReturn the measure of the cell at the index idx.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.npoints-Union{Tuple{Bramble.MeshnD{D, T}}, Tuple{T}, Tuple{D}} where {D, T}","page":"Internals","title":"Bramble.npoints","text":"npoints(mesh)\n\nReturn the number of points of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.points-Union{Tuple{Bramble.MeshnD{D}}, Tuple{D}} where D","page":"Internals","title":"Bramble.points","text":"points(mesh)\n\nReturn the points of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.points-Union{Tuple{D}, Tuple{Bramble.MeshnD{D}, Tuple{Vararg{Int64, D}}}} where D","page":"Internals","title":"Bramble.points","text":"points(mesh, idx)\n\nReturn the point at index idx in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.pointsit-Union{Tuple{Bramble.MeshnD{D}}, Tuple{D}} where D","page":"Internals","title":"Bramble.pointsit","text":"pointsit(mesh)\n\nReturn an iterator over all points in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.xmean-Union{Tuple{D}, Tuple{Bramble.MeshnD{D}, Tuple{Vararg{Int64, D}}}} where D","page":"Internals","title":"Bramble.xmean","text":"xmean(mesh, idx)\n\nCompute the mean of the points at index idx in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.xmeanit-Union{Tuple{Bramble.MeshnD{D}}, Tuple{D}} where D","page":"Internals","title":"Bramble.xmeanit","text":"xmeanit(mesh)\n\nReturn an iterator over all mean points in the mesh.\n\n\n\n\n\n","category":"method"}]
}
