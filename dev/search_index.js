var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API documentation","title":"API documentation","text":"CollapsedDocStrings = false","category":"page"},{"location":"api/#API-documentation","page":"API documentation","title":"API documentation","text":"","category":"section"},{"location":"api/","page":"API documentation","title":"API documentation","text":"Documentation for Bramble.jl's public API.","category":"page"},{"location":"api/#Geometry","page":"API documentation","title":"Geometry","text":"","category":"section"},{"location":"api/","page":"API documentation","title":"API documentation","text":"CartesianProduct\nInterval\n×\nmarkers\nlabels\nDomain","category":"page"},{"location":"api/#Bramble.CartesianProduct","page":"API documentation","title":"Bramble.CartesianProduct","text":"Creates a cartesian product of D intervals with elements of type T.\n\nFields\n\ndata, a D-tuple containing the intervals defining the coordinate projections as 2-tuples.\n\n\n\n\n\n","category":"type"},{"location":"api/#Bramble.Interval","page":"API documentation","title":"Bramble.Interval","text":"Interval(x, y)\n\n\nCreates an interval set from two scalars x and y.\n\nFields\n\nx, the lower bound\ny, the upper bound\n\nExample\n\njulia> Interval(0.0, 1.0)\nCartesianProduct{1,Float64}((0.0,1.0))\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.:×","page":"API documentation","title":"Bramble.:×","text":"×(X, Y)\n\n\nCompute the cartesian product of two cartesian products X and Y.\n\nFields\n\nX – the first set\nY – the second set\n\nExample\n\njulia> X = CartesianProduct(0, 1); Y = CartesianProduct(2, 3);\n\t   X × Y;\nType: Float64 \n Dim: 2 \n Set: [0.0, 1.0] × [2.0, 3.0]\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.markers","page":"API documentation","title":"Bramble.markers","text":"markers(p...)\n\nConverts pairs of \"label\" => func to domain markers to be accepted in the Domain constructor.\n\nExample\n\njulia> markers( \"Dirichlet\" => (x -> x-1), \"Neumann\" => (x -> x-0) )\n\n\n\n\n\nmarkers(domain)\n\nReturns a generator with the markers associated with a domain.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.labels","page":"API documentation","title":"Bramble.labels","text":"labels(domain)\n\nReturns a generator with the labels of the markers associated with a domain.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.Domain","page":"API documentation","title":"Bramble.Domain","text":"struct Domain{SetType, MarkersType}\n\tset::SetType\n\tmarkers::MarkersType\nend\n\nStructure to represent a domain composed of cartesian set and a set of markers.\n\n\n\n\n\n","category":"type"},{"location":"#Bramble.jl","page":"Home","title":"Bramble.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation is for Bramble.jl, a Julia library implementing discretization methods to solve partial differential equations using finite differences on nonuniform grids.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more information on the types of discretizations encompassed by Bramble.jl, please consult the papers","category":"page"},{"location":"","page":"Home","title":"Home","text":"J. A. Ferreira and R. D. Grigorieff, On the supraconvergence of elliptic finite difference schemes, Applied Numerical Mathematics 28 (1998), pp. 275-292\nS. Barbeiro, J. A. Ferreira and R. D. Grigorieff, Supraconvergence of a finite difference scheme for solutions in H^s(0L), IMA Journal of Numerical Analysis 25.4 (2005), pp. 797–811\nJ. A. Ferreira and R. D. Grigorieff, Supraconvergence and Supercloseness of a Scheme for Elliptic Equations on Nonuniform Grids, Numerical Functional Analysis and Optimization 27.5-6 (2006), pp. 539–564","category":"page"},{"location":"internals/","page":"Full internal documentation","title":"Full internal documentation","text":"CollapsedDocStrings = false","category":"page"},{"location":"internals/#Full-internal-documentation","page":"Full internal documentation","title":"Full internal documentation","text":"","category":"section"},{"location":"internals/","page":"Full internal documentation","title":"Full internal documentation","text":"Documentation for Bramble.jl's functions.","category":"page"},{"location":"internals/#Geometry","page":"Full internal documentation","title":"Geometry","text":"","category":"section"},{"location":"internals/#Sets","page":"Full internal documentation","title":"Sets","text":"","category":"section"},{"location":"internals/","page":"Full internal documentation","title":"Full internal documentation","text":"Modules = [Bramble]\nPublic = false\nPages = [\"sets.jl\"]","category":"page"},{"location":"internals/#Base.eltype-Union{Tuple{CartesianProduct{D, T}}, Tuple{T}, Tuple{D}} where {D, T}","page":"Full internal documentation","title":"Base.eltype","text":"eltype(_)\n\n\nGet the element type of a cartesian product set.\n\nFields\n\nX – the set\n\nExample\n\njulia> eltype(CartesianProduct(0.0, 1.0))\nFloat64\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Union{Tuple{CartesianProduct{D}}, Tuple{D}} where D","page":"Full internal documentation","title":"Bramble.dim","text":"dim(_)\n\n\nGet the topological dimension of a cartesian product set.\n\nFields\n\nX – the Cartesian product\n\nExample\n\njulia> dim(CartesianProduct(0.0, 1.0))\n1\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.projection-Tuple{CartesianProduct, Any}","page":"Full internal documentation","title":"Bramble.projection","text":"projection(X, i)\n\n\nGet the i-th set in the cartesian product set X (as a 1D set).\n\nFields\n\nX – the set\ni – the index of the set\n\n\n\n\n\n","category":"method"},{"location":"internals/#Domains","page":"Full internal documentation","title":"Domains","text":"","category":"section"},{"location":"internals/","page":"Full internal documentation","title":"Full internal documentation","text":"Modules = [Bramble]\nPublic = false\nPages = [\"domains.jl\"]","category":"page"},{"location":"internals/#Bramble.DomainBaseType","page":"Full internal documentation","title":"Bramble.DomainBaseType","text":"DomainBaseType\n\nAn abstract type for representing a domain.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Bramble.Marker","page":"Full internal documentation","title":"Bramble.Marker","text":"struct Marker{F<:Function}\n\tlabel::String\n\tf::F\nend\n\nStructure to implement markers for the boundary or interior of a domain. Each marker is composed of a label and a levelset function that identifies a portion of the domain.\n\nFields\n\nlabel::String, label associated with the marker.\nf::F`, function associated with the marker.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Base.eltype-Tuple{Domain}","page":"Full internal documentation","title":"Base.eltype","text":"eltype(domain)\n\nReturns the element type of a domain.\n\nExample\n\njulia> eltype(Domain(I × I))\nFloat64```\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Tuple{Bramble.DomainBaseType}","page":"Full internal documentation","title":"Bramble.dim","text":"dim(domain)\n\nReturns the dimension of a domain.\n\nExample\n\njulia> I = Interval(0.0, 1.0);\n\t   dim(Domain(I × I));\n2\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.markerfuncs-Tuple{Domain}","page":"Full internal documentation","title":"Bramble.markerfuncs","text":"markerfuncs(domain)\n\nReturns a generator with the marker levelset functions associated with a domain.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.projection-Tuple{Domain, Int64}","page":"Full internal documentation","title":"Bramble.projection","text":"projection(domain, i)\n\nReturns the i-th projection of a domain. For example, projection(Domain(I × I), 1) will return I.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.set-Tuple{Domain}","page":"Full internal documentation","title":"Bramble.set","text":"set(domain)\n\n\nset(domain)\n\nReturns the set associated with a domain.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Mesh","page":"Full internal documentation","title":"Mesh","text":"","category":"section"},{"location":"internals/#1D-Meshes","page":"Full internal documentation","title":"1D Meshes","text":"","category":"section"},{"location":"internals/","page":"Full internal documentation","title":"Full internal documentation","text":"Modules = [Bramble]\nPublic = false\nPages = [\"mesh1d.jl\"]","category":"page"},{"location":"internals/#Bramble.Mesh1D","page":"Full internal documentation","title":"Bramble.Mesh1D","text":"Mesh1D{T}(markers, indices, pts, npts)\n\nCreate a 1D mesh with `npts` points of type `T`. The points that define the mesh are \nstored in `pts` and are identified, following the same order, with the\nindices in `indices`. The mesh is defined by the markers in `markers`, \nwhich stores which indices correspond to which marker.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Bramble.Mesh1D-Tuple{Any}","page":"Full internal documentation","title":"Bramble.Mesh1D","text":"(mesh::Mesh1D)()\n\nReturn the mesh itself.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.eltype-Union{Tuple{Bramble.Mesh1D{T}}, Tuple{T}} where T","page":"Full internal documentation","title":"Base.eltype","text":"eltype(mesh::Mesh1D{T})\n\nReturn the type of the points in mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.eltype-Union{Tuple{Type{<:Bramble.Mesh1D{T}}}, Tuple{T}} where T","page":"Full internal documentation","title":"Base.eltype","text":"eltype(mesh::Mesh1D)\n\nReturn the type of the points in the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.show-Tuple{IO, Bramble.Mesh1D}","page":"Full internal documentation","title":"Base.show","text":"show(io::IO, mesh::Mesh1D)\n\nPrint a summary of the mesh to io.\n\nExample\n\njulia> mesh\nI = Interval(0,1);\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.addmarkers!-Tuple{Dict{String, Set{CartesianIndex{1}}}, Domain, CartesianIndices{1, R} where R<:Tuple{OrdinalRange{Int64, Int64}}, Any}","page":"Full internal documentation","title":"Bramble.addmarkers!","text":"addmarkers!(mrks::MeshMarkers{1}, domain::Domain, R::CartesianIndices{1}, pts)\n\nAdd markers to the mesh based on the domain.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.bcindices-Tuple{Bramble.Mesh1D}","page":"Full internal documentation","title":"Bramble.bcindices","text":"bcindices(mesh::Mesh1D)\n\nCompute the boundary indices of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.bcindices-Tuple{CartesianIndices{1, R} where R<:Tuple{OrdinalRange{Int64, Int64}}}","page":"Full internal documentation","title":"Bramble.bcindices","text":"bcindices(R::CartesianIndices{1})\n\nCompute the boundary indices of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.create_mesh1d_basics-Tuple{Domain, Int64, Bool}","page":"Full internal documentation","title":"Bramble.create_mesh1d_basics","text":"create_mesh1d_basics(domain::Domain, npts::Int, unif::Bool)\n\nCreate the basic components of a 1D mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.createpoints!-Union{Tuple{T}, Tuple{Vector{T}, CartesianProduct{1, T}, Int64, Bool}} where T","page":"Full internal documentation","title":"Bramble.createpoints!","text":"createpoints!(x::Vector{T}, I::CartesianProduct{1,T}, npts::Int, unif::Bool) where T\n\nCreate a vector of points x uniformly or randomly distributed in the interval I.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Union{Tuple{Bramble.Mesh1D{T}}, Tuple{T}} where T","page":"Full internal documentation","title":"Bramble.dim","text":"dim(mesh::Mesh1D{T})\n\nReturn the topologicaldimension of the domain associated with mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Union{Tuple{Type{<:Bramble.Mesh1D{T}}}, Tuple{T}} where T","page":"Full internal documentation","title":"Bramble.dim","text":"dim(mesh::Mesh1D)\n\nReturn the topological dimension of the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.generate_indices-Tuple{Int64}","page":"Full internal documentation","title":"Bramble.generate_indices","text":"generate_indices(npts::Int)\n\nGenerate a CartesianIndices object for a 1D array of length npts.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hmean-Union{Tuple{T}, Tuple{Bramble.Mesh1D{T}, Any}} where T","page":"Full internal documentation","title":"Bramble.hmean","text":"hmean(mesh::Mesh1D{T}, i)\n\nCompute the mean of the space step size at index i in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hmeanit-Tuple{Bramble.Mesh1D}","page":"Full internal documentation","title":"Bramble.hmeanit","text":"hmeanit(mesh::Mesh1D)\n\nReturn an iterator over all mean space step sizes in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hspace-Tuple{Bramble.Mesh1D, Any}","page":"Full internal documentation","title":"Bramble.hspace","text":"hspace(mesh::Mesh1D, i)\n\nCompute the space step size at index i in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hspaceit-Tuple{Bramble.Mesh1D}","page":"Full internal documentation","title":"Bramble.hspaceit","text":"hspaceit(mesh::Mesh1D)\n\nReturn an iterator over all space step sizes in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.intindices-Tuple{Bramble.Mesh1D}","page":"Full internal documentation","title":"Bramble.intindices","text":"intindices(mesh::Mesh1D)\n\nCompute the interior indices of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.intindices-Tuple{CartesianIndices{1, R} where R<:Tuple{OrdinalRange{Int64, Int64}}}","page":"Full internal documentation","title":"Bramble.intindices","text":"intindices(R::CartesianIndices{1})\n\nCompute the interior indices of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.meas_cell-Tuple{Bramble.Mesh1D, CartesianIndex{1}}","page":"Full internal documentation","title":"Bramble.meas_cell","text":"meas_cell(mesh::Mesh1D, idx::CartesianIndex{1})\n\nCompute the measure of the cell at index idx in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.meas_cellit-Tuple{Bramble.Mesh1D}","page":"Full internal documentation","title":"Bramble.meas_cellit","text":"meas_cellit(mesh::Mesh1D)\n\nReturn an iterator over all cell measures in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.npoints-Tuple{Bramble.Mesh1D}","page":"Full internal documentation","title":"Bramble.npoints","text":"npoints(mesh::Mesh1D)\n\nReturn a tuple of the number of points in the mesh.\n\n#Example\n\njulia> npoints(mesh)\nI = Interval(0,1);\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.pointsit-Tuple{Bramble.Mesh1D}","page":"Full internal documentation","title":"Bramble.pointsit","text":"pointsit(mesh::Mesh1D)\n\nReturn an iterator over all points in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.xmean-Union{Tuple{T}, Tuple{Bramble.Mesh1D{T}, Any}} where T","page":"Full internal documentation","title":"Bramble.xmean","text":"xmean(mesh::Mesh1D{T}, i)\n\nCompute the mean of the points at index i in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.xmeanit-Tuple{Bramble.Mesh1D}","page":"Full internal documentation","title":"Bramble.xmeanit","text":"xmeanit(mesh::Mesh1D)\n\nReturn an iterator over all mean points in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#nD-Meshes,-n1","page":"Full internal documentation","title":"nD Meshes, n1","text":"","category":"section"},{"location":"internals/","page":"Full internal documentation","title":"Full internal documentation","text":"Modules = [Bramble]\nPublic = false\nPages = [\"meshnd.jl\"]","category":"page"},{"location":"internals/#Bramble.MeshnD","page":"Full internal documentation","title":"Bramble.MeshnD","text":"MeshnD{n,T}(markers, indices, pts, npts)\n\nCreate a cartesian nD-mesh with `npts` points. For efficiency,\nthe mesh points are not stored. Instead, we store the points\nof the 1D meshes that make up the nD mesh. To connect both nD and \n1D meshes, we use the indices in `indices`. The mesh is defined \nby the markers in `markers`, which stores which indices \ncorrespond to which marker.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Bramble.MeshnD-Tuple{Any}","page":"Full internal documentation","title":"Bramble.MeshnD","text":"mesh(i)\n\nReturn the i-th submesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.eltype-Union{Tuple{Bramble.MeshnD{D, T}}, Tuple{T}, Tuple{D}} where {D, T}","page":"Full internal documentation","title":"Base.eltype","text":"eltype(mesh)\n\nReturn the eltype of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.eltype-Union{Tuple{Type{<:Bramble.MeshnD{D, T}}}, Tuple{T}, Tuple{D}} where {D, T}","page":"Full internal documentation","title":"Base.eltype","text":"eltype(mesh::MeshnD)\n\nReturn the type of the points in the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.show-Tuple{IO, Bramble.MeshnD}","page":"Full internal documentation","title":"Base.show","text":"show(io, mesh)\n\nPrint a description of the mesh to the IO stream io.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.addmarkers!-Union{Tuple{D}, Tuple{Dict{String, Set{CartesianIndex{D}}}, Domain, Tuple{Vararg{Bramble.Mesh1D, D}}}} where D","page":"Full internal documentation","title":"Bramble.addmarkers!","text":"addmarkers!(markers, domain, meshes)\n\nAdd the markers of the domain to the markers of the mesh, using the submeshes.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.bcindices-Tuple{Bramble.MeshnD}","page":"Full internal documentation","title":"Bramble.bcindices","text":"bcindices(mesh)\n\nReturn the boundary indices of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Union{Tuple{Bramble.MeshnD{D}}, Tuple{D}} where D","page":"Full internal documentation","title":"Bramble.dim","text":"dim(mesh)\n\nReturn the dimension of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.dim-Union{Tuple{Type{<:Bramble.MeshnD{D, T}}}, Tuple{D}, Tuple{T}} where {T, D}","page":"Full internal documentation","title":"Bramble.dim","text":"dim(mesh::MeshnD)\n\nReturn the topological dimension of the mesh\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.generate_indices-Union{Tuple{Tuple{Vararg{Int64, D}}}, Tuple{D}} where D","page":"Full internal documentation","title":"Bramble.generate_indices","text":"generate_indices(nPoints)\n\nReturn the indices of a mesh with nPoints[i] in each direction.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hmean-Union{Tuple{D}, Tuple{Bramble.MeshnD{D}, Tuple{Vararg{Int64, D}}}} where D","page":"Full internal documentation","title":"Bramble.hmean","text":"hmean(mesh, idx)\n\nCompute the mean of the space step sizes at index idx in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hmeanit-Union{Tuple{Bramble.MeshnD{D}}, Tuple{D}} where D","page":"Full internal documentation","title":"Bramble.hmeanit","text":"hmeanit(mesh)\n\nReturn an iterator over all mean space step sizes in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hspace-Union{Tuple{D}, Tuple{Bramble.MeshnD{D}, Tuple{Vararg{Int64, D}}}} where D","page":"Full internal documentation","title":"Bramble.hspace","text":"hspace(mesh, idx)\n\nCompute the space step size at index idx in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.hspaceit-Union{Tuple{Bramble.MeshnD{D}}, Tuple{D}} where D","page":"Full internal documentation","title":"Bramble.hspaceit","text":"hspaceit(mesh)\n\nReturn an iterator over all space step sizes in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.intindices-Union{Tuple{CartesianIndices{D, R} where R<:Tuple{Vararg{OrdinalRange{Int64, Int64}, D}}}, Tuple{D}} where D","page":"Full internal documentation","title":"Bramble.intindices","text":"intindices(mesh)\n\nReturn the interior indices of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.is_boundary_index-Union{Tuple{D}, Tuple{CartesianIndex{D}, CartesianIndices{D, R} where R<:Tuple{Vararg{OrdinalRange{Int64, Int64}, D}}}} where D","page":"Full internal documentation","title":"Bramble.is_boundary_index","text":"is_boundary_index(idx, R)\n\nReturn true if the index idx is a boundary index of the mesh with indices stored in R.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.meas_cell-Union{Tuple{T}, Tuple{D}, Tuple{Bramble.MeshnD{D, T}, CartesianIndex{D}}} where {D, T}","page":"Full internal documentation","title":"Bramble.meas_cell","text":"meas_cell(mesh, idx)\n\nReturn the measure of the cell at the index idx.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.npoints-Union{Tuple{Bramble.MeshnD{D, T}}, Tuple{T}, Tuple{D}} where {D, T}","page":"Full internal documentation","title":"Bramble.npoints","text":"npoints(mesh)\n\nReturn the number of points of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.pointsit-Union{Tuple{Bramble.MeshnD{D}}, Tuple{D}} where D","page":"Full internal documentation","title":"Bramble.pointsit","text":"pointsit(mesh)\n\nReturn an iterator over all points in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.xmean-Union{Tuple{D}, Tuple{Bramble.MeshnD{D}, Tuple{Vararg{Int64, D}}}} where D","page":"Full internal documentation","title":"Bramble.xmean","text":"xmean(mesh, idx)\n\nCompute the mean of the points at index idx in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Bramble.xmeanit-Union{Tuple{Bramble.MeshnD{D}}, Tuple{D}} where D","page":"Full internal documentation","title":"Bramble.xmeanit","text":"xmeanit(mesh)\n\nReturn an iterator over all mean points in the mesh.\n\n\n\n\n\n","category":"method"}]
}
