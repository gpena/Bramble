var documenterSearchIndex = {"docs":
[{"location":"internals/space/","page":"Spaces","title":"Spaces","text":"CollapsedDocStrings = false","category":"page"},{"location":"internals/space/#Spaces","page":"Spaces","title":"Spaces","text":"","category":"section"},{"location":"internals/space/","page":"Spaces","title":"Spaces","text":"Modules = [Bramble]\nPublic = false\nPages = [\"gridspace.jl\", \"vectorelements.jl\", \"matrixelements.jl\", \"difference_utils.jl\", \"backward_difference.jl\", \"backward_finite_difference.jl\", \"forward_difference.jl\", \"jump.jl\", \"average.jl\", \"inner_product.jl\"]","category":"page"},{"location":"internals/space/#Bramble.BrambleGridSpaceFunction","page":"Spaces","title":"Bramble.BrambleGridSpaceFunction","text":"struct BrambleGridSpaceFunction{S,T} \n\tf_tuple::FunctionWrapper{T, Tuple{VectorElement{S,T}}}\nend\n\nStructure to wrap around functions defined on gridspaces to make them more type agnostic. It uses FunctionWrappers to provide functions calculated on VectorElement. \n\n\n\n\n\n","category":"type"},{"location":"internals/space/#Bramble.GridSpace","page":"Spaces","title":"Bramble.GridSpace","text":"struct GridSpace{MType,D,T}\n\tmesh::MType\n\tinnerh_weights::Vector{T}\n\tinnerplus_weights::NTuple{D,Vector{T}}}\n\tcache::SpaceCacheType\nend\n\nStructure for a gridspace defined on a mesh.\n\nThe vector innerh_weights has the weights for the standard discrete L^2 inner product on the space of grid functions defined as follows\n\n1D case\n\n(u_h v_h)_h = sum_i=1^N_x square_i u_h(x_i) v_h(x_i)\n\n2D case\n\n(u_h v_h)_h = sum_i=1^N_xsum_j=1^N_y square_ij u_h(x_iy_j) v_h(x_iy_j)\n\n3D case\n\n(u_h v_h)_h = sum_i=1^N_xsum_j=1^N_ysum_l=1^N_z square_ijl u_h(x_iy_jz_l) v_h(x_iy_jz_l)\n\nHere, cdot denotes the measure of the set and all details on the definition of square_i, square_ij and square_ijl can be found in functions cell_measure (for the 1-dimensional case) and cell_measure (for the n-dimensional cases).\n\nThe tuple of vectors innerplus_weights has the weights for the modified discrete L^2 inner product on the space of grid functions, for each component (x, y, z).\n\n1D case\n\n(u_h v_h)_+ = sum_i=1^N_x h_i u_h(x_i) v_h(x_i)\n\n2D case\n\n(u_h v_h)_+x = sum_i=1^N_xsum_j=1^N_y h_xi h_yj+12 u_h(x_iy_j) v_h(x_iy_j)\n\n(u_h v_h)_+y = sum_i=1^N_xsum_j=1^N_y h_xi h_yj+12 u_h(x_iy_j) v_h(x_iy_j)\n\n3D case\n\n(u_h v_h)_+x = sum_i=1^N_xsum_j=1^N_ysum_l=1^N_z h_xi h_yj+12 h_zl+12 u_h(x_iy_jz_l) v_h(x_iy_jz_l)\n\n(u_h v_h)_+y = sum_i=1^N_xsum_j=1^N_ysum_l=1^N_z h_xi+12 h_yj h_zl+12 u_h(x_iy_jz_l) v_h(x_iy_jz_l)\n\n(u_h v_h)_+z = sum_i=1^N_xsum_j=1^N_ysum_l=1^N_z h_xi+12 h_yj+12 h_zl u_h(x_iy_jz_l) v_h(x_iy_jz_l)\n\n\n\n\n\n","category":"type"},{"location":"internals/space/#Bramble.MatrixElement","page":"Spaces","title":"Bramble.MatrixElement","text":"MatrixElement{S, T}\n\nA MatrixElement is a container with a sparse matrix where each entry is a T. the container also has a space S to retain the information to which this special element belongs to. Its purpose is to represent discretization matrices from finite difference methods.\n\n\n\n\n\n","category":"type"},{"location":"internals/space/#Bramble.SpaceType","page":"Spaces","title":"Bramble.SpaceType","text":"SpaceType\n\nAbstract type for grid spaces defined on meshes of type MeshType.\n\n\n\n\n\n","category":"type"},{"location":"internals/space/#Bramble.VectorElement","page":"Spaces","title":"Bramble.VectorElement","text":"struct VectorElement{S,T}\n\tspace::S\n\tvalues::Vector{T}\nend\n\nVector element of space S with coefficients of type T.\n\n\n\n\n\n","category":"type"},{"location":"internals/space/#Base.eltype-Tuple{Bramble.SpaceType}","page":"Spaces","title":"Base.eltype","text":"eltype(Wₕ::SpaceType)\neltype(::Type{<:SpaceType{MType}})\n\nReturns the element type of the mesh associated with GridSpace Wₕ. If the input argument is a type derived from SpaceType then the function returns the element type of the MeshType associated with it.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.__innerplus_weights!-Tuple{Any, Any}","page":"Spaces","title":"Bramble.__innerplus_weights!","text":"__innerplus_weights!(v, innerplus_per_component)\n\nBuilds the weights for the modified discrete L^2 inner product on the space of grid functions GridSpace. The result is stored in vector v.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble._innerplus_mean_weights!-Union{Tuple{T}, Tuple{Vector{T}, Bramble.MeshType}, Tuple{Vector{T}, Bramble.MeshType, Int64}} where T","page":"Spaces","title":"Bramble._innerplus_mean_weights!","text":"_innerplus_mean_weights!(u::Vector{T}, Ωₕ::MeshType, component::Int = 1)\n\nBuilds a set of weights based on the half spacings, associated with the component-th direction, for the modified discrete L^2 inner product on the space of grid functions, following the order of the points. The values are stored in vector u. for each component.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble._innerplus_weights!-Union{Tuple{T}, Tuple{Vector{T}, Bramble.MeshType}, Tuple{Vector{T}, Bramble.MeshType, Int64}} where T","page":"Spaces","title":"Bramble._innerplus_weights!","text":"_innerplus_weights!(u::Vector{T}, Ωₕ::MeshType, component::Int = 1)\n\nBuilds a set of weights based on the spacings, associated with the component-th direction, for the modified discrete L^2 inner product on the space of grid functions, following the order of the points provided by indices(Ωₕ). The values are stored in vector u.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.build_innerh_weights!-Tuple{Any, Bramble.MeshType}","page":"Spaces","title":"Bramble.build_innerh_weights!","text":"build_innerh_weights!(u, Ωₕ::MeshType)\n\nBuilds the weights for the standard discrete L^2 inner product, inner_h(cdot cdot), on the space of grid functions, following the order of the points provided by indices(Ωₕ). The values are stored in vector u.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.get_diff_matrix-Tuple{Bramble.SpaceType, Any}","page":"Spaces","title":"Bramble.get_diff_matrix","text":"get_diff_matrix(Wₕ::SpaceType, i)\n\nReturns the i-th cached differentiation matrix of GridSpace Wₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.ndofs-Tuple{Bramble.SpaceType}","page":"Spaces","title":"Bramble.ndofs","text":"ndofs(Wₕ::SpaceType)\n\nReturns the number of degrees of freedom of the GridSpace Wₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:*-Tuple{Bramble.VectorElement, Bramble.VectorElement}","page":"Spaces","title":"Base.:*","text":"*(uₕ::VectorElement, vₕ::VectorElement)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation of uₕ*vₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:*-Tuple{Bramble.VectorElement, Number}","page":"Spaces","title":"Base.:*","text":"*(uₕ::VectorElement, α::Number)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation ofuₕ*α.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:*-Tuple{Number, Bramble.VectorElement}","page":"Spaces","title":"Base.:*","text":"*(α::Number, uₕ::VectorElement)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation ofα*uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:+-Tuple{Bramble.VectorElement, Bramble.VectorElement}","page":"Spaces","title":"Base.:+","text":"+(uₕ::VectorElement, vₕ::VectorElement)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation of uₕ+vₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:+-Tuple{Bramble.VectorElement, Number}","page":"Spaces","title":"Base.:+","text":"+(uₕ::VectorElement, α::Number)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation ofuₕ+α.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:+-Tuple{Number, Bramble.VectorElement}","page":"Spaces","title":"Base.:+","text":"+(α::Number, uₕ::VectorElement)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation ofα+uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:--Tuple{Bramble.VectorElement, Bramble.VectorElement}","page":"Spaces","title":"Base.:-","text":"-(uₕ::VectorElement, vₕ::VectorElement)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation of uₕ-vₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:--Tuple{Bramble.VectorElement, Number}","page":"Spaces","title":"Base.:-","text":"-(uₕ::VectorElement, α::Number)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation ofuₕ-α.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:--Tuple{Number, Bramble.VectorElement}","page":"Spaces","title":"Base.:-","text":"-(α::Number, uₕ::VectorElement)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation ofα-uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:/-Tuple{Bramble.VectorElement, Bramble.VectorElement}","page":"Spaces","title":"Base.:/","text":"/(uₕ::VectorElement, vₕ::VectorElement)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation of uₕ/vₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:/-Tuple{Bramble.VectorElement, Number}","page":"Spaces","title":"Base.:/","text":"/(uₕ::VectorElement, α::Number)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation ofuₕ/α.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:/-Tuple{Number, Bramble.VectorElement}","page":"Spaces","title":"Base.:/","text":"/(α::Number, uₕ::VectorElement)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation ofα/uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:^-Tuple{Bramble.VectorElement, Bramble.VectorElement}","page":"Spaces","title":"Base.:^","text":"^(uₕ::VectorElement, vₕ::VectorElement)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation of uₕ^vₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:^-Tuple{Bramble.VectorElement, Number}","page":"Spaces","title":"Base.:^","text":"^(uₕ::VectorElement, α::Number)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation ofuₕ^α.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:^-Tuple{Number, Bramble.VectorElement}","page":"Spaces","title":"Base.:^","text":"^(α::Number, uₕ::VectorElement)\n\nReturns a new VectorElement with coefficients given by the elementwise evaluation ofα^uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.copyto!-Tuple{Bramble.VectorElement, Bramble.VectorElement}","page":"Spaces","title":"Base.copyto!","text":"copyto!(uₕ::VectorElement, vₕ::VectorElement)\ncopyto!(uₕ::VectorElement, v::AbstractVector)\ncopyto!(uₕ::VectorElement, α::Number)\n\nCopies the coefficients of VectorElement vₕ into VectorElement uₕ. The second argument can also be a regular Vector or a Number`.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.eltype-Union{Tuple{Bramble.VectorElement{S, T}}, Tuple{T}, Tuple{S}} where {S, T}","page":"Spaces","title":"Base.eltype","text":"eltype(uₕ::VectorElement{S,T})\neltype(::Type{<:VectorElement{S,T}})\n\nReturns the element type of a VectorElement uₕ, T`.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.similar-Tuple{Bramble.VectorElement}","page":"Spaces","title":"Base.similar","text":"similar(uh::VectorElement)\n\nReturns a new VectorElement belonging to the same GridSpace as uh, with uninitialized components.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.__integrand1d-Tuple{Any, Any, Any}","page":"Spaces","title":"Bramble.__integrand1d","text":"__integrand1d(y, t, p)\n\nImplements the integrand function needed in the calculation of avgₕ. In this function, y denotes the return values, t denotes the integration variable and p denotes the parameters (integrand function f, points x, spacing h and indices idxs).\n\nFor efficiency, each integral in avgₕ is rewritten as an integral over [0,1] following\n\nint_a^b f(x) dx = (b-a) int_0^1 f(a + t (b-a)) dt\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.__integrandnd-Tuple{Any, Any, Any}","page":"Spaces","title":"Bramble.__integrandnd","text":"__integrandnd(y, t, p)\n\nImplements the integrand function needed in the calculation of avgₕ. In this function, y denotes the return values, t denotes the integration variable and p denotes the parameters (integrand function f, points x, measures meas and indices idxs).\n\nFor efficiency, each integral is calculated on 01^D, where D is the dimension of the integration domain. This is done through a similar change of variable as in __integrand1d(y, t, p).\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.space-Tuple{Bramble.VectorElement}","page":"Spaces","title":"Bramble.space","text":"space(uₕ::VectorElement)\n\nReturns the space associated with VectorElement uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:*-Tuple{Bramble.MatrixElement, Bramble.MatrixElement}","page":"Spaces","title":"Base.:*","text":"*(Uₕ::MatrixElement, Vₕ::MatrixElement)\n\nReturns a new MatrixElement given by multiplying the matrix of MatrixElement Uₕ by the matrix of MatrixElement Vₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:*-Tuple{Bramble.MatrixElement, Bramble.VectorElement}","page":"Spaces","title":"Base.:*","text":"*(Uₕ::MatrixElement, vₕ::VectorElement)\n\nReturns a new MatrixElement calculated by multiplying each coefficient of VectorElement vₕ with the corresponding column of Uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:*-Tuple{Bramble.MatrixElement, Number}","page":"Spaces","title":"Base.:*","text":"*(Uₕ::MatrixElement, α::Number)\n\nReturns a new MatrixElement with coefficients given by the elementwise evaluation ofUₕ*α.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:*-Tuple{Bramble.VectorElement, Bramble.MatrixElement}","page":"Spaces","title":"Base.:*","text":"*(uₕ::VectorElement, Vₕ::MatrixElement)\n\nReturns a new MatrixElement calculated by multiplying each coefficient of VectorElement uₕ with the corresponding row of Vₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:*-Tuple{Number, Bramble.MatrixElement}","page":"Spaces","title":"Base.:*","text":"*(α::Number, Uₕ::MatrixElement)\n\nReturns a new MatrixElement with coefficients given by the elementwise evaluation ofα*Uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:+-Tuple{Bramble.MatrixElement, Bramble.MatrixElement}","page":"Spaces","title":"Base.:+","text":"+(Uₕ::MatrixElement, Vₕ::MatrixElement)\n\nReturns a new MatrixElement given by adding the matrix of MatrixElement Uₕ to the matrix of MatrixElement Vₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:+-Tuple{Bramble.MatrixElement, Number}","page":"Spaces","title":"Base.:+","text":"+(Uₕ::MatrixElement, α::Number)\n\nReturns a new MatrixElement with coefficients given by the elementwise evaluation ofUₕ+α.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:+-Tuple{Number, Bramble.MatrixElement}","page":"Spaces","title":"Base.:+","text":"+(α::Number, Uₕ::MatrixElement)\n\nReturns a new MatrixElement with coefficients given by the elementwise evaluation ofα+Uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:--Tuple{Bramble.MatrixElement, Bramble.MatrixElement}","page":"Spaces","title":"Base.:-","text":"-(Uₕ::MatrixElement, Vₕ::MatrixElement)\n\nReturns a new MatrixElement given by subtracting the matrix of MatrixElement Vₕ to the matrix of MatrixElement Uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:--Tuple{Bramble.MatrixElement, Number}","page":"Spaces","title":"Base.:-","text":"-(Uₕ::MatrixElement, α::Number)\n\nReturns a new MatrixElement with coefficients given by the elementwise evaluation ofUₕ-α.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:--Tuple{Number, Bramble.MatrixElement}","page":"Spaces","title":"Base.:-","text":"-(α::Number, Uₕ::MatrixElement)\n\nReturns a new MatrixElement with coefficients given by the elementwise evaluation ofα-Uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:/-Tuple{Bramble.MatrixElement, Number}","page":"Spaces","title":"Base.:/","text":"/(Uₕ::MatrixElement, α::Number)\n\nReturns a new MatrixElement with coefficients given by the elementwise evaluation ofUₕ/α.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:/-Tuple{Number, Bramble.MatrixElement}","page":"Spaces","title":"Base.:/","text":"/(α::Number, Uₕ::MatrixElement)\n\nReturns a new MatrixElement with coefficients given by the elementwise evaluation ofα/Uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:^-Tuple{Bramble.MatrixElement, Number}","page":"Spaces","title":"Base.:^","text":"^(Uₕ::MatrixElement, α::Number)\n\nReturns a new MatrixElement with coefficients given by the elementwise evaluation ofUₕ^α.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.:^-Tuple{Number, Bramble.MatrixElement}","page":"Spaces","title":"Base.:^","text":"^(α::Number, Uₕ::MatrixElement)\n\nReturns a new MatrixElement with coefficients given by the elementwise evaluation ofα^Uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.copyto!-Tuple{Bramble.MatrixElement, Bramble.MatrixElement}","page":"Spaces","title":"Base.copyto!","text":"copyto!(Uₕ::MatrixElement, Vₕ::MatrixElement)\n\nCopies the coefficients of MatrixElement Vₕ into MatrixElement Uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.eltype-Union{Tuple{Bramble.MatrixElement{S, T}}, Tuple{T}, Tuple{S}} where {S, T}","page":"Spaces","title":"Base.eltype","text":"eltype(Uₕ::MatrixElement{S,T})\neltype(::Type{MatrixElement{S,T}})\n\nReturns the element type of a MatrixElement, T`.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.length-Tuple{Bramble.MatrixElement}","page":"Spaces","title":"Base.length","text":"length(Uₕ::MatrixElement)\n\nReturns the length of a MatrixElement.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Base.similar-Tuple{Bramble.MatrixElement}","page":"Spaces","title":"Base.similar","text":"similar(Uₕ::MatrixElement)\n\nReturns a similar MatrixElement to Uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.elements-Tuple{Bramble.SpaceType, SparseArrays.SparseMatrixCSC}","page":"Spaces","title":"Bramble.elements","text":"elements(Wₕ::SpaceType, A::SparseMatrixCSC)\n\nReturns a MatrixElement from a given SpaceType, initialized with the sparse matrix A.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.elements-Tuple{Bramble.SpaceType}","page":"Spaces","title":"Bramble.elements","text":"elements(Wₕ::SpaceType)\n\nReturns a MatrixElement from a given SpaceType, initialized with the identity matrix.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.space-Tuple{Bramble.MatrixElement}","page":"Spaces","title":"Bramble.space","text":"space(Uₕ::MatrixElement)\n\nReturns the space associated with the MatrixElement Uₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble._backward_differencex!-Tuple{Any, Any, Tuple{Int64}}","page":"Spaces","title":"Bramble._backward_differencex!","text":"_backward_differencex!(out, in, dims::NTuple{1,Int})\n\nIn-place computation of the backward difference in the x direction of vector in for a 1-dimensional element. The result is stored  in out. Allows for in and out to be the same vector.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble._backward_differencex!-Union{Tuple{D}, Tuple{Any, Any, Tuple{Vararg{Int64, D}}}} where D","page":"Spaces","title":"Bramble._backward_differencex!","text":"_backward_differencex!(out, in, dims::NTuple{D,Int}, ::Val{D})\n\nIn-place computation of the backward difference in the x direction of vector in for a D-dimensional (D1) element. The result is stored  in out. Allows for in and out to be the same vector.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble._backward_differencey!-Tuple{Any, Any, Tuple{Int64, Int64, Int64}}","page":"Spaces","title":"Bramble._backward_differencey!","text":"_backward_differencey!(out, in, dims::NTuple{3,Int})\n\nIn-place computation of the backward difference in the y direction of vector in for a 3-dimensional element. The result is stored  in out. Allows for in and out to be the same vector.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble._backward_differencey!-Tuple{Any, Any, Tuple{Int64, Int64}}","page":"Spaces","title":"Bramble._backward_differencey!","text":"_backward_differencey!(out, in, dims::NTuple{2,Int})\n\nIn-place computation of the difference in the y direction of vector in for a 2-dimensional element. The result is stored  in out. Allows for in and out to be the same vector.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble._backward_differencez!-Tuple{Any, Any, Tuple{Int64, Int64, Int64}}","page":"Spaces","title":"Bramble._backward_differencez!","text":"_backward_differencez!(out, in, dims::NTuple{3,Int})\n\nIn-place computation of the backward difference in the z direction of vector in for a 3-dimensional element. The result is stored  in out. Allows for in and out to be the same vector.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble._backward_finite_differencex!-Tuple{Any, Any, Any, Tuple{Int64}}","page":"Spaces","title":"Bramble._backward_finite_differencex!","text":"_backward_finite_differencex!(out, in, hx, dims::NTuple{1,Int})\n\nIn-place computation of the backward finite difference in the x direction of vector in for a 1-dimensional element. The spacings are encoded in hx. The result is stored  in out. Allows for in and out to be the same vector.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble._backward_finite_differencex!-Union{Tuple{D}, Tuple{Any, Any, Any, Tuple{Vararg{Int64, D}}}} where D","page":"Spaces","title":"Bramble._backward_finite_differencex!","text":"_backward_finite_differencex!(out, in, hx, dims::NTuple{D,Int})\n\nIn-place computation of the backward finite difference in the x direction of vector in for a D-dimensional element. The spacings are encoded in hx. The result is stored  in out. Allows for in and out to be the same vector.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble._backward_finite_differencey!-Tuple{Any, Any, Any, Tuple{Int64, Int64, Int64}}","page":"Spaces","title":"Bramble._backward_finite_differencey!","text":"_backward_finite_differencey!(out, in, hy, dims::NTuple{3,Int})\n\nIn-place computation of the backward finite difference in the y direction of vector in for a 3-dimensional element. The spacings are encoded in hy. The result is stored  in out. Allows for in and out to be the same vector.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble._backward_finite_differencey!-Tuple{Any, Any, Any, Tuple{Int64, Int64}}","page":"Spaces","title":"Bramble._backward_finite_differencey!","text":"_backward_finite_differencey!(out, in, hy, dims::NTuple{2,Int})\n\nIn-place computation of the backward finite difference in the y direction of vector in for a 2-dimensional element. The spacings are encoded in hy. The result is stored  in out. Allows for in and out to be the same vector.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble._backward_finite_differencez!-Tuple{Any, Any, Any, Tuple{Int64, Int64, Int64}}","page":"Spaces","title":"Bramble._backward_finite_differencez!","text":"_backward_finite_differencez!(out, in, hz, dims::NTuple{3,Int})\n\nIn-place computation of the backward finite difference in the z direction of vector in for a 3-dimensional element. The spacings are encoded in hz. The result is stored  in out. Allows for in and out to be the same vector.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.weights_D₋ᵧ!-Tuple{Any, Bramble.MeshType, Val{2}}","page":"Spaces","title":"Bramble.weights_D₋ᵧ!","text":"weights_D₋ᵧ!(v, Ωₕ::MeshType, ::Val{2})\n\nSets v to the inverse of the spacing of Ωₕ on the y component, h_yj .\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.weights_D₋ᵧ!-Tuple{Any, Bramble.MeshType, Val{3}}","page":"Spaces","title":"Bramble.weights_D₋ᵧ!","text":"weights_D₋ᵧ!(v, Ωₕ::MeshType, ::Val{3})\n\nSets v to the inverse of the spacing of Ωₕ on the y component, h_yj .\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.weights_D₋₂!-Tuple{Any, Bramble.MeshType, Val{3}}","page":"Spaces","title":"Bramble.weights_D₋₂!","text":"weights_D₋₂!(v, Ωₕ::MeshType, ::Val{3})\n\nSets v to the inverse of the spacing of Ωₕ on the z component, h_zl .\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.weights_D₋ₓ!-Tuple{Any, Bramble.MeshType, Val{1}}","page":"Spaces","title":"Bramble.weights_D₋ₓ!","text":"weights_D₋ₓ!(v, Ωₕ::MeshType, ::Val{1})\n\nSets v to the inverse of the spacing of Ωₕ on the x component, h_i .\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.weights_D₋ₓ!-Union{Tuple{D}, Tuple{Any, Bramble.MeshType, Val{D}}} where D","page":"Spaces","title":"Bramble.weights_D₋ₓ!","text":"weights_D₋ₓ!(v, Ωₕ::MeshType, ::Val{D})\n\nSets v to the inverse of the spacing of Ωₕ on the x component, h_xi .\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.innerh_weights-Tuple{Bramble.SpaceType}","page":"Spaces","title":"Bramble.innerh_weights","text":"innerh_weights(Wₕ::SpaceType)\n\nReturns the weights to be used in the calculation of innerₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/space/#Bramble.innerplus_weights-Union{Tuple{D}, Tuple{Bramble.SpaceType, Val{D}}} where D","page":"Spaces","title":"Bramble.innerplus_weights","text":"innerplus_weights(Wₕ::SpaceType, ::Val{D})\n\nReturns the weights to be used in the calculation of inner₊.\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"API","title":"API","text":"CollapsedDocStrings = false\nCurrentModule = Bramble","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Documentation for Bramble.jl's public API.","category":"page"},{"location":"api/#Geometries-and-meshes","page":"API","title":"Geometries and meshes","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"interval(x, y)\n×\ndim\ndomain(X::CartesianProduct)\ncreate_markers\nmarkers(Ω::Domain)\nlabels(Ω::Domain)\n@embed\nmesh(Ω::Domain, npts::NTuple{D,Int}, unif::NTuple{D,Bool}) where D\npoints\nhₘₐₓ\nnpoints","category":"page"},{"location":"api/#Bramble.interval-Tuple{Any, Any}","page":"API","title":"Bramble.interval","text":"interval(x, y)\ninterval(x::CartesianProduct{1})\n\nReturns a 1-dimensional CartesianProduct representing the interval [x,y].\n\nExample\n\njulia> interval(0, 1)\nCartesianProduct{1,Float64}((0.0,1.0))\n\n\n\n\n\n","category":"method"},{"location":"api/#Bramble.:×","page":"API","title":"Bramble.:×","text":"×(X::CartesianProduct, Y::CartesianProduct)\n\nReturns the cartesian product of two CartesianProducts X and Y as a new CartesianProduct.\n\nExample\n\njulia> X = interval(0, 1); Y = interval(2, 3); X × Y;\nType: Float64 \n Dim: 2 \n Set: [0.0, 1.0] × [2.0, 3.0]\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.dim","page":"API","title":"Bramble.dim","text":"dim(X::CartesianProduct)\ndim(::Type{<:CartesianProduct})\n\nReturns the topological dimension of a CartesianProduct.\n\nExample\n\njulia> X = cartesianproduct(0, 1); dim(X)\n1\n\njulia> Y = cartesianproduct(((0,1), (4,5))); dim(Y)\n2\n\n\n\n\n\ndim(Ω::Domain)\ndim(::Type{<:Domain})\n\nReturns the topological dimension of the Domain Ω.\n\nExample\n\njulia> I = interval(0.0, 1.0); dim(domain(I × I))\n2\n\n\n\n\n\ndim(Ωₕ::MeshType)\ndim(::Type{<:MeshType})\n\nReturns the tolopogical dimension of Ωₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.domain-Tuple{Bramble.CartesianProduct}","page":"API","title":"Bramble.domain","text":"domain(X::CartesianProduct)\ndomain(Ω::CartesianProduct, markers::MarkersType)\n\nReturns a Domain from a CartesianProduct, assuming the single Marker \":dirichlet\" => x -> 0. Alternatively, a set of Marker can be passed as an argument.\n\nExample\n\njulia> domain(interval(0,1))\nType: Float64 \n Dim: 1 \n Set: [0.0, 1.0]\n\nBoundary markers: :dirichlet\n\njulia> I = interval(0,1); m = markers( :dirichlet => @embed(I, x->x[1]-1)), :neumann => @embed(I, x->x[1]-0)); domain(interval(0,1), m)\nType: Float64 \n Dim: 1 \n Set: [0.0, 1.0]\n\nBoundary markers: :dirichlet, :neumann\n\n\n\n\n\n","category":"method"},{"location":"api/#Bramble.create_markers","page":"API","title":"Bramble.create_markers","text":"create_markers(m::MarkerType...)\n\nConverts several Pair{Symbol,F} (:symbol => func) to Markers. These are to be passed in the construction of a Domain. The functions need to be defined as BrambleBareFunctions.\n\nExample\n\njulia> create_markers( :dirichlet => @embed(X, x -> x[1]-1), :neumann => @embed(X, x -> x[2]-0) )\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.markers-Tuple{Bramble.Domain}","page":"API","title":"Bramble.markers","text":"markers(Ω::Domain)\n\nReturns a generator with the Markers associated with Domain Ω.\n\n\n\n\n\n","category":"method"},{"location":"api/#Bramble.labels-Tuple{Bramble.Domain}","page":"API","title":"Bramble.labels","text":"labels(Ω::Domain)\n\nReturns a generator with the labels of the Markers associated with Domain Ω.\n\n\n\n\n\n","category":"method"},{"location":"api/#Bramble.@embed","page":"API","title":"Bramble.@embed","text":"@embed(X:CartesianProduct, f)\n@embed(X:Domain, f)\n@embed(X:MeshType, f)\n@embed(X:SpaceType, f)\n\nReturns a new wrapped version of function f. If \n\nX is not a SpaceType, the topological dimension of X is used to caracterize the types in the returning BrambleBareFunction; in this case, the new function can be applied to tuples (with point coordinates) or cartesian indices (if X is a MeshType)\nX is a SpaceType, the returning function type, BrambleGridSpaceFunction, is caracterized by the dimension of the elements of the space.\n\nExample\n\njulia> Ω = domain(interval(0,1) × interval(0,1)); f = @embed Ω x -> x[1]*x[2]+1;  # or f = @embed(Ω, x -> x[1]*x[2]+1)\n\n\n\n\n\n","category":"macro"},{"location":"api/#Bramble.mesh-Union{Tuple{D}, Tuple{Bramble.Domain, Tuple{Vararg{Int64, D}}, Tuple{Vararg{Bool, D}}}} where D","page":"API","title":"Bramble.mesh","text":"mesh(Ω::Domain, npts::Int, unif::Bool)\nmesh(Ω::Domain, npts::NTuple{D}, unif::NTuple{D})\n\nReturns a Mesh1D or a MeshnD (D=23) defined on the Domain Ω. The number of points for each coordinate projection mesh are given in the tuple npts. The distribution of points on the submeshes are encoded in the tuple unif. \n\nFor future reference, the mesh points are denoted as\n\n- 1D mesh, with `npts` = ``N_x``\n\nx_i  i=1dotsN\n\n2D mesh, with npts = (N_x, N_y)\n\n(x_iy_j)  i=1dotsN_x  j=1dotsN_y\n\n3D mesh, with npts = (N_x, N_y, N_z)\n\n(x_iy_jz_l)  i=1dotsN_x  j=1dotsN_y  l=1dotsN_z\n\nExamples\n\njulia> I = interval(0,1); Ωₕ = mesh(domain(I), 10, true)\n1D mesh\nnPoints: 10\nMarkers: Dirichlet\n\njulia> X = domain(interval(0,1) × interval(4,5)); Ωₕ = mesh(X, (10, 15), (true, false))\n2D mesh\nnPoints: 150\nMarkers: [\"Dirichlet\"]\n\nSubmeshes:\n  x direction | nPoints: 10\n  y direction | nPoints: 15\n\n\n\n\n\n","category":"method"},{"location":"api/#Bramble.points","page":"API","title":"Bramble.points","text":"points(Ωₕ::Mesh1D)\npoints(Ωₕ::Mesh1D, i)\npoints(Ωₕ::Mesh1D, Iterator)\n\nReturns a vector with all the points x_i  i=1dotsN in Ωₕ. A second argument can be passed. If it is an Int or a CartesianIndex{1}, it returns the i-th point of Ωₕ, x_i. If the second argument is Iterator then the function returns a generator iterating over the points.\n\n\n\n\n\npoints(Ωₕ::MeshnD)\npoints(Ωₕ::MeshnD{D}, idx)\npoints(Ωₕ::MeshnD{D}, Iterator)\n\nReturns a tuple with the points of Ωₕ. If the Tuple idx is passed as the second argument is passed, it returns the tuple with the point corresponding to that index. Alternatively, if Iterator is passed as the second argument, a generator iterating over all points of the mesh is returned.\n\n2D mesh, with npts = (N_x, N_y)\n\n(x_i_i=1^N_x y_j_j=1^N_y)\n\n3D mesh, with npts = (N_x, N_y, N_z)\n\n(x_i_i=1^N_x y_j_j=1^N_y z_l_l=1^N_z)\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.hₘₐₓ","page":"API","title":"Bramble.hₘₐₓ","text":"hₘₐₓ(Ωₕ::Mesh1D)\n\nReturns the maximum over the space stepsize h_iof mesh Ωₕ\n\nh_max vcentcolon = max_i=1dotsN x_i - x_i-1\n\n\n\n\n\nhₘₐₓ(Ωₕ::MeshnD)\n\nReturns the maximum diagonal of mesh Ωₕ.\n\n2D mesh\n\nmax_ij Vert (h_xi h_yj) Vert_2\n\n3D mesh\n\nmax_ijl Vert (h_xi h_yj  h_zl) Vert_2\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.npoints","page":"API","title":"Bramble.npoints","text":"npoints(Ωₕ::Mesh1D)\nnpoints(Ωₕ::Mesh1D, Tuple)\n\nReturns the number of points x_i in Ωₕ. If the second argument is passed, it returns the same information as a 1-tuple.\n\nExample\n\njulia> Ωₕ = mesh(domain(interval(0,1)), 10, true); npoints(Ωₕ)\n10\n\n\n\n\n\nnpoints(Ωₕ::MeshnD)\nnpoints(Ωₕ::MeshnD, Tuple)\n\nReturns the number of points of mesh Ωₕ. If Tuple is passed as the second argument, it returns a tuple with the number of points of each submesh composing Ωₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Spaces","page":"API","title":"Spaces","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"gridspace\nelement\nmesh(Wₕ::SpaceType{MType}) where MType\navgₕ\navgₕ!\nRₕ\nRₕ!\ndiff₋ₓ\ndiff₋ᵧ\ndiff₋₂\ndiff₋ₕ\ndiffₓ\ndiffᵧ\ndiff₂\ndiffₕ(Wₕ::SpaceType)\nD₋ₓ\nD₋ᵧ\nD₋₂\n∇₋ₕ(Wₕ::SpaceType)\njumpₓ\njumpᵧ\njumpₕ(Wₕ::SpaceType)\njump₂\nM₋ₕₓ\nM₋ₕᵧ\nM₋ₕ₂\nM₋ₕ(Wₕ::SpaceType)\ninnerₕ\ninner₊ₓ\ninner₊ᵧ\ninner₊₂\ninner₊\nnormₕ\nnorm₊\nsnorm₁ₕ\nnorm₁ₕ","category":"page"},{"location":"api/#Bramble.gridspace","page":"API","title":"Bramble.gridspace","text":"gridspace(Ωₕ::MeshType)\n\nConstructor for a GridSpace defined on the mesh Ωₕ. This builds the weights for the inner products mentioned in GridSpace as well as the differentiation matrices associated with the grid points of mesh Ωₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.element","page":"API","title":"Bramble.element","text":"element(Wₕ::SpaceType)\n\nReturns a VectorElement for GridSpace Wₕ with uninitialized components.\n\n\n\n\n\nelement(Wₕ::SpaceType, α::Number)\n\nReturns a VectorElement for GridSpace Wₕ with all components equal to α.\n\n\n\n\n\nelement(Wₕ::SpaceType, v::AbstractVector)\n\nReturns a VectorElement for GridSpace Wₕ with the same coefficients of v.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.mesh-Union{Tuple{Bramble.SpaceType{MType}}, Tuple{MType}} where MType","page":"API","title":"Bramble.mesh","text":"mesh(Wₕ::SpaceType)\nmesh(::Type{<:SpaceType{MType}})\n\nReturns the mesh on which the GridSpace Wₕ is defined. If the input argument is a type derived from SpaceType then the function returns the MeshType associated with it.\n\n\n\n\n\n","category":"method"},{"location":"api/#Bramble.avgₕ","page":"API","title":"Bramble.avgₕ","text":"avgₕ(Wₕ::SpaceType, f)\n\nReturns a VectorElement with the average of function f with respect to the cell_measure of mesh(Wₕ) around each grid point. It can accept any function (like x->x[2]+x[1])) or a BrambleBareFunction. The latter is preferred. It is defined as follows\n\n1D case\n\ntextrmavgₕ(x_i) = frac1square_i int_square_i f(x) dx  i = 1dotsN\n\n2D case\n\ntextrmavgₕ(x_i y_j) = frac1square_ij iint_square_ij f(xy) dA  i = 1dotsN_x  j = 1dotsN_y\n\n3D case\n\ntextrmavgₕ(x_i y_j z_l) = frac1square_ijl iiint_square_ijl f(xyz) dV  i = 1dotsN_x  j = 1dotsN_y l = 1dotsN_z\n\nPlease check the implementations of functions cell_measure (for the 1-dimensional case) and cell_measure (for the n-dimensional cases).\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.avgₕ!","page":"API","title":"Bramble.avgₕ!","text":"avgₕ!(uₕ::VectorElement, f)\n\nIn-place version of averaging operator avgₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.Rₕ","page":"API","title":"Bramble.Rₕ","text":"Rₕ(Wₕ::SpaceType, f)\n\nStandard nodal restriction operator. It returns a VectorElement with the result of evaluating the function f at the points of mesh(Wₕ). It can accept any function (like x->x[2]+x[1])) or a BrambleBareFunction. The latter is preferred.\n\n1D case\n\ntextrmRₕ(x_i) = f(x_i)  i = 1dotsN\n\n2D case\n\ntextrmRₕ (x_i y_j)= f(x_i y_j)  i = 1dotsN_x  j = 1dotsN_y\n\n3D case\n\ntextrmRₕ (x_i y_j z_l)= f(x_i y_j z_l)  i = 1dotsN_x  j = 1dotsN_y l = 1dotsN_z\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.Rₕ!","page":"API","title":"Bramble.Rₕ!","text":"Rₕ!(uₕ::VectorElement, f)\n\nIn-place version of the restriction operator Rₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.diff₋ₓ","page":"API","title":"Bramble.diff₋ₓ","text":"diff₋ₓ(Wₕ::SpaceType)\ndiff₋ₓ(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the backward difference matrix for the mesh grid of Wₕ, in the x direction. It is defined as being the (sparse) matrix representation of the linear operator defined by diff₋ₓ. It can also be calculated passing a mesh as argument.\n\n\n\n\n\ndiff₋ₓ(uₕ::VectorElement)\n\nReturns the backward difference, in the x direction, of the element uₕ.\n\n1D case\n\ntextrmdiff_-x textrmu_h(x_i) vcentcolon = textrmu_h(x_i) - textrmu_h(x_i-1)\n\n2D and 3D case\n\ntextrmdiff_-x textrmu_h(x_i dots) vcentcolon = textrmu_h(x_i dots)-textrmu_h(x_i-1 dots)\n\n\n\n\n\ndiff₋ₓ(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the backward difference matrix, in the x direction, by Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.diff₋ᵧ","page":"API","title":"Bramble.diff₋ᵧ","text":"diff₋ᵧ(Wₕ::SpaceType)\ndiff₋ᵧ(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the backward difference matrix for the mesh grid of Wₕ, in the y direction. It is defined as being the (sparse) matrix representation of the linear operator defined by diff₋ᵧ. It can also be calculated passing a mesh as argument.\n\n\n\n\n\ndiff₋ᵧ(uₕ::VectorElement)\n\nReturns the backward difference, in the y direction, of the element uₕ.\n\n2D and 3D case\n\ntextrmdiff_-y textrmu_h(x_i y_jdots) vcentcolon = textrmu_h(x_i y_jdots)-textrmu_h(x_i y_j-1 dots)\n\n\n\n\n\ndiff₋ᵧ(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the backward difference matrix, in the y direction, by Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.diff₋₂","page":"API","title":"Bramble.diff₋₂","text":"diff₋₂(Wₕ::SpaceType)\ndiff₋₂(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the backward difference matrix for the mesh grid of Wₕ, in the z direction. It is defined as being the (sparse) matrix representation of the linear operator defined by diff₋₂. It can also be calculated passing a mesh as argument.\n\n\n\n\n\ndiff₋₂(uₕ::VectorElement)\n\nReturns the backward difference, in the z direction, of the element uₕ.\n\ntextrmdiff_-z textrmu_h(x_i y_jz_l) vcentcolon = textrmu_h(x_i y_jz_l)-textrmu_h(x_i y_j z_l-1)\n\n\n\n\n\ndiff₋₂(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the backward difference matrix, in the z direction, by Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.diff₋ₕ","page":"API","title":"Bramble.diff₋ₕ","text":"diff₋ₕ(Wₕ::SpaceType)\n\nReturns a tuple of MatrixElements implementing the backward difference operators in the x, y, and z directions. If the problem is 1-dimensikonal, it returns a single MatrixElement.\n\n\n\n\n\ndiff₋ₕ(uₕ::VectorElement)\n\nReturns a tuple of VectorElements implementing the backward difference operators in the x, y, and z directions applied to uₕ. If the problem is 1-dimensional, it returns a single VectorElement.\n\n\n\n\n\ndiff₋ₕ(Uₕ::MatrixElement)\n\nReturns a tuple of MatrixElements implementing the forward difference operators in the x, y, and z directions applied to Uₕ. If the problem is 1-dimensional, it returns a single MatrixElement.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.diffₓ","page":"API","title":"Bramble.diffₓ","text":"diffₓ(Wₕ::SpaceType)\ndiffₓ(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the forward difference matrix for the mesh grid of Wₕ, in the x direction. It is defined as being the (sparse) matrix representation of the linear operator defined by diffₓ. It can also accept a mesh as an argument.\n\n\n\n\n\ndiffₓ(uₕ::VectorElement)\n\nReturns the forward difference, in the x direction, of the element uₕ.\n\n1D case\n\ntextrmdiff_x textrmu_h(x_i) vcentcolon = textrmu_h(x_i+1) - textrmu_h(x_i)\n\n2D and 3D case\n\ntextrmdiff_x textrmu_h(x_i dots) vcentcolon = textrmu_h(x_i+1 dots)-textrmu_h(x_i dots)\n\n\n\n\n\ndiffₓ(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the forward difference matrix, in the x direction, by Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.diffᵧ","page":"API","title":"Bramble.diffᵧ","text":"diffᵧ(Wₕ::SpaceType)\ndiffᵧ(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the forward difference matrix for the mesh grid of Wₕ, in the y direction. It is defined as being the (sparse) matrix representation of the linear operator defined by diffᵧ. It can also accept a mesh as an argument.\n\n\n\n\n\ndiffᵧ(uₕ::VectorElement)\n\nReturns the forward difference, in the y direction, of the element uₕ.\n\n2D and 3D case\n\ntextrmdiff_y textrmu_h(x_i y_jdots) vcentcolon = textrmu_h(x_i y_j+1dots)-textrmu_h(x_i y_j dots)\n\n\n\n\n\ndiffᵧ(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the forward difference matrix, in the y direction, by Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.diff₂","page":"API","title":"Bramble.diff₂","text":"diff₂(Wₕ::SpaceType)\ndiff₂(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the forward difference matrix for the mesh grid of Wₕ, in the z direction. It is defined as being the (sparse) matrix representation of the linear operator defined by diff₂. It can also accept a mesh as an argument.\n\n\n\n\n\ndiff₂(uₕ::VectorElement)\n\nReturns the forward difference, in the z direction, of the element uₕ.\n\ntextrmdiff_-z textrmu_h(x_i y_jz_l) vcentcolon = textrmu_h(x_i y_jz_l)-textrmu_h(x_i y_j z_l-1)\n\n\n\n\n\ndiff₂(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the forward difference matrix, in the z direction, by Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.diffₕ-Tuple{Bramble.SpaceType}","page":"API","title":"Bramble.diffₕ","text":"diffₕ(Wₕ::SpaceType)\n\nReturns a tuple of MatrixElements implementing the forward difference operators in the   x, y and z directions. If the problem is 1-dimensional, it returns a single MatrixElement.\n\n\n\n\n\n","category":"method"},{"location":"api/#Bramble.D₋ₓ","page":"API","title":"Bramble.D₋ₓ","text":"D₋ₓ(Wₕ::SpaceType)\nD₋ₓ(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the backward finite difference matrix for the mesh grid of Wₕ, in the x direction. It is defined as being the (sparse) matrix representation of the linear operator defined by D₋ₓ. It can also accept a mesh as an argument.\n\n\n\n\n\nD₋ₓ(uₕ::VectorElement)\n\nReturns the backward finite difference, in the x direction, of the element uₕ.\n\n1D case\n\ntextrmD_-x textrmu_h (x_i) vcentcolon = fractextrmu_h(x_i) - textrmu_h(x_i-1)h_i\n\n2D and 3D case\n\ntextrmD_-x textrmu_h (x_i dots) vcentcolon = fractextrmu_h(x_i dots)-textrmu_h(x_i-1 dots)h_xi\n\n\n\n\n\nD₋ₓ(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the backward finite difference matrix D₋ₓ with the MatrixElement Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.D₋ᵧ","page":"API","title":"Bramble.D₋ᵧ","text":"D₋ᵧ(Wₕ::SpaceType)\nD₋ᵧ(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the backward finite difference matrix for the mesh grid of Wₕ, in the y direction. It is defined as being the (sparse) matrix representation of the linear operator defined by D₋ᵧ. It can also accept a mesh as an argument.\n\n\n\n\n\nD₋ᵧ(uₕ::VectorElement)\n\nReturns the backward finite difference, in the y direction, of the element uₕ.\n\ntextrmD_-y textrmu_h(x_i y_j dots) vcentcolon = fractextrmu_h(x_i y_j dots)-textrmu_h(x_i y_j-1 dots)h_yj\n\n\n\n\n\nD₋ᵧ(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the backward finite difference matrix D₋ᵧ with the MatrixElement Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.D₋₂","page":"API","title":"Bramble.D₋₂","text":"D₋₂(Wₕ::SpaceType)\nD₋₂(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the backward finite difference matrix for the mesh grid of Wₕ, in the z direction. It is defined as being the (sparse) matrix representation of the linear operator defined by D₋₂. It can also accept a mesh as an argument.\n\n\n\n\n\nD₋₂(uₕ::VectorElement)\n\nReturns the backward finite difference, in the z direction, of the element uₕ.\n\ntextrmD_-z textrmu_h(x_i y_j z_l) vcentcolon = fractextrmu_h(x_i y_j z_l)-textrmu_h(x_i y_j z_)h_zl\n\n\n\n\n\nD₋₂(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the backward finite difference matrix D₋₂ with the MatrixElement Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.∇₋ₕ-Tuple{Bramble.SpaceType}","page":"API","title":"Bramble.∇₋ₕ","text":"∇₋ₕ(Wₕ::SpaceType)\n\nReturns a tuple of MatrixElements implementing the backward finite difference operators in the x, y, and z directions. If the problem is 1-dimensional, it returns a single MatrixElement.\n\n\n\n\n\n","category":"method"},{"location":"api/#Bramble.jumpₓ","page":"API","title":"Bramble.jumpₓ","text":"jumpₓ(Wₕ::SpaceType)\njumpₓ(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the jump matrix for the mesh grid of Wₕ, in the x direction. It is defined as being the (sparse) matrix representation of the linear operator defined by jumpₓ. It also accepts a mesh as an argument.\n\n\n\n\n\njumpₓ(uₕ::VectorElement)\n\nReturns the jump, in the x direction, of the element uₕ.\n\n1D case\n\ntextrmjump_x textrmu_h(x_i) vcentcolon = textrmu_h(x_i) - textrmu_h(x_i+1)\n\n2D and 3D case\n\ntextrmjump_x textrmu_h(x_i dots) vcentcolon = textrmu_h(x_i dots)-textrmu_h(x_i+1 dots)\n\n\n\n\n\njumpₓ(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the jump matrix jumpₓ with the MatrixElement Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.jumpᵧ","page":"API","title":"Bramble.jumpᵧ","text":"jumpᵧ(Wₕ::SpaceType)\njumpᵧ(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the jump matrix for the mesh grid of Wₕ, in the y direction. It is defined as being the (sparse) matrix representation of the linear operator defined by jumpᵧ. It also accepts a mesh as an argument.\n\n\n\n\n\njumpᵧ(uₕ::VectorElement)\n\nReturns the jump, in the y direction, of the element uₕ.\n\ntextrmjump_y textrmu_h(x_i y_jdots) vcentcolon = textrmu_h(x_i y_jdots)-textrmu_h(x_i y_j+1 dots)\n\n\n\n\n\njumpᵧ(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the jump matrix jumpᵧ with the MatrixElement Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.jumpₕ-Tuple{Bramble.SpaceType}","page":"API","title":"Bramble.jumpₕ","text":"jumpₕ(Wₕ::SpaceType)\n\nReturns a tuple of MatrixElements implementing the jump operators in the x, y, and z directions. If the problem is 1-dimensional, it returns a single MatrixElement.\n\n\n\n\n\n","category":"method"},{"location":"api/#Bramble.jump₂","page":"API","title":"Bramble.jump₂","text":"jump₂(Wₕ::SpaceType)\njump₂(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the jump matrix for the mesh grid of Wₕ, in the z direction. It is defined as being the (sparse) matrix representation of the linear operator defined by jump₂. It also accepts a mesh as an argument.\n\n\n\n\n\njump₂(uₕ::VectorElement)\n\nReturns the jump, in the z direction, of the element uₕ.\n\ntextrmjump_z textrmu_h(x_i y_jz_l) vcentcolon = textrmu_h(x_i y_j z_l)-textrmu_h(x_i y_j z_l+1)\n\n\n\n\n\njump₂(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the jump matrix jump₂ with the MatrixElement Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.M₋ₕₓ","page":"API","title":"Bramble.M₋ₕₓ","text":"M₋ₕₓ(Wₕ::SpaceType)\nM₋ₕₓ(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the average matrix for the mesh grid of Wₕ, in the x direction. It is defined as being the (sparse) matrix representation of the linear operator defined by M₋ₕₓ. It also accepts a mesh as argument.\n\n\n\n\n\nM₋ₕₓ(uₕ::VectorElement)\n\nReturns the average, in the x direction, of the element uₕ.\n\n1D case\n\ntextrmM_-hx textrmu_h(x_i) vcentcolon = fractextrmu_h(x_i) + textrmu_h(x_i-1)2\n\n2D and 3D case\n\ntextrmM_-hx textrmu_h(x_i dots) vcentcolon = fractextrmu_h(x_i dots)+textrmu_h(x_i-1 dots)2\n\n\n\n\n\nM₋ₕₓ(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the average matrix M₋ₕₓ with the MatrixElement Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.M₋ₕᵧ","page":"API","title":"Bramble.M₋ₕᵧ","text":"M₋ₕᵧ(Wₕ::SpaceType)\nM₋ₕᵧ(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the average matrix for the mesh grid of Wₕ, in the y direction. It is defined as being the (sparse) matrix representation of the linear operator defined by M₋ₕᵧ. It also accepts a mesh as argument.\n\n\n\n\n\nM₋ₕᵧ(uₕ::VectorElement)\n\nReturns the average, in the y direction, of the element uₕ.\n\ntextrmM_-hy textrmu_h(x_i y_jdots) vcentcolon = textrmu_h(x_i y_jdots)-textrmu_h(x_i y_j+1 dots)\n\n\n\n\n\nM₋ₕᵧ(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the average matrix M₋ₕᵧ with the MatrixElement Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.M₋ₕ₂","page":"API","title":"Bramble.M₋ₕ₂","text":"M₋ₕ₂(Wₕ::SpaceType)\nM₋ₕ₂(Ωₕ::MeshType)\n\nReturns a MatrixElement implementing the average matrix for the mesh grid of Wₕ, in the z direction. It is defined as being the (sparse) matrix representation of the linear operator defined by M₋ₕ₂. It also accepts a mesh as argument.\n\n\n\n\n\nM₋ₕ₂(uₕ::VectorElement)\n\nReturns the average, in the z direction, of the element uₕ.\n\ntextrmM_-hz textrmu_h(x_i y_jz_l) vcentcolon = fractextrmu_h(x_i y_j z_l)+textrmu_h(x_i y_j z_l-1)2\n\n\n\n\n\nM₋ₕ₂(Uₕ::MatrixElement)\n\nReturns a MatrixElement resulting of the multiplication of the average matrix M₋ₕ₂ with the MatrixElement Uₕ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.M₋ₕ-Tuple{Bramble.SpaceType}","page":"API","title":"Bramble.M₋ₕ","text":"M₋ₕ(Wₕ::SpaceType)\n\nReturns a tuple of MatrixElements implementing the average operators in the x, y, and z directions.\n\n\n\n\n\n","category":"method"},{"location":"api/#Bramble.innerₕ","page":"API","title":"Bramble.innerₕ","text":"innerₕ(uₕ::VectorElement, vₕ::VectorElement)\ninnerₕ(Uₕ::VecOrMatElem, Vₕ::VecOrMatElem)\n\nReturns the discrete L^2 inner product of the grid functions uₕ and vₕ\n\n1D case\n\n(textrmu_h textrmv_h)_h vcentcolon = sum_i=1^N square_i textrmu_h(x_i) textrmv_h(x_i)\n\n2D case\n\n(textrmu_h textrmv_h)_h vcentcolon = sum_i=1^N_x sum_j=1^N_y square_ij textrmu_h(x_iy_j) textrmv_h(x_iy_j)\n\n3D case\n\n(textrmu_h textrmv_h)_h vcentcolon = sum_i=1^N_x sum_j=1^N_y  sum_l=1^N_z  square_ijl textrmu_h(x_iy_j) textrmv_h(x_iy_j)\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.inner₊ₓ","page":"API","title":"Bramble.inner₊ₓ","text":"inner₊ₓ(uₕ::VecOrMatElem, vₕ::VecOrMatElem)\n\nReturns the discrete modified L^2 inner product of the grid functions uₕ and vₕ associated with the first variable. It accepts arguments of type VectorElement or MatrixElement, in any order.\n\nFor VectorElements, it is defined as\n\n1D case\n\n(textrmu_h textrmv_h)_+ vcentcolon = sum_i=1^N_x h_i textrmu_h(x_i) textrmv_h(x_i)\n\n2D case\n\n(textrmu_h textrmv_h)_+x vcentcolon = sum_i=1^N_xsum_j=1^N_y  h_xi h_yj+12  textrmu_h(x_iy_j) textrmv_h(x_iy_j)\n\n3D case\n\n(textrmu_h textrmv_h)_+x vcentcolon = sum_i=1^N_xsum_j=1^N_ysum_l=1^N_z   h_xi h_yj+12 h_zl+12  textrmu_h(x_iy_jz_l) textrmv_h(x_iy_jz_l)\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.inner₊ᵧ","page":"API","title":"Bramble.inner₊ᵧ","text":"inner₊ᵧ(uₕ::VecOrMatElem, vₕ::VecOrMatElem)\n\nReturns the discrete modified L^2 inner product of the grid functions uₕ and vₕ associated with the second variable. It accepts\n\n2D case\n\n(textrmu_h textrmv_h)_+y vcentcolon = sum_i=1^N_xsum_j=1^N_y   h_xi h_yj+12   textrmu_h(x_iy_j) textrmv_h(x_iy_j)\n\n3D case\n\n(textrmu_h textrmv_h)_+y vcentcolon = sum_i=1^N_xsum_j=1^N_ysum_l=1^N_z   h_xi+12 h_yj h_zl+12 textrmu_h(x_iy_jz_l) textrmv_h(x_iy_jz_l)\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.inner₊₂","page":"API","title":"Bramble.inner₊₂","text":"inner₊₂(uₕ::VecOrMatElem, vₕ::VecOrMatElem)\n\nReturns the discrete modified L^2 inner product of the grid functions uₕ and vₕ associated with the z variable\n\n(textrmu_h textrmv_h)_+z vcentcolon = sum_i=1^N_xsum_j=1^N_ysum_l=1^N_z  h_xi+12 h_yj+12 h_zl textrmu_h(x_iy_jz_l) textrmv_h(x_iy_jz_l)\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.inner₊","page":"API","title":"Bramble.inner₊","text":"inner₊(uₕ::VecOrMatElem, vₕ::VecOrMatElem)\ninner₊(uₕ::VecOrMatElem, vₕ::VecOrMatElem, Tuple)\ninner₊(uₕ::NTuple, vₕ::NTuple)\n\nReturns the discrete modified L^2 inner product of the grid functions uₕ and vₕ. It accepts arguments of type VectorElement or MatrixElement, in any order.\n\nIf the Tuple argument is given, it returns D-tuple of all textrminner_x_i+ applied to its input arguments, where D is the topological dimension of the mesh associated with the elements.\n\nIf NTuples of VectorElement or MatrixElement are passed as input arguments, it returns the sum of all inner products (textrmu_hitextrmv_hi)_+x_i.\n\nFor VectorElements, the definition is given by\n\n1D case\n\n(textrmu_h textrmv_h)_+ vcentcolon = sum_i=1^N_x h_i textrmu_h(x_i) textrmv_h(x_i)\n\n2D case\n\n(textrmu_h textrmv_h)_+ vcentcolon = (textrmu_h textrmv_h)_+x + (textrmu_h textrmv_h)_+y\n\n3D case\n\n(textrmu_h textrmv_h)_+ vcentcolon = (textrmu_h textrmv_h)_+x + (textrmu_h textrmv_h)_+y + (textrmu_h textrmv_h)_+z\n\nSee the definitions of inner₊ₓ, inner₊ᵧ and inner₊₂ for more details.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.normₕ","page":"API","title":"Bramble.normₕ","text":"normₕ(uₕ::VectorElement)\n\nReturns the discrete L^2 norm of the grid function uₕ, defined as\n\nVert textrmu_h Vert_h vcentcolon = sqrt(textrmu_h textrmu_h)_h\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.norm₊","page":"API","title":"Bramble.norm₊","text":"norm₊(uₕ::VectorElement)\nnorm₊(uₕ::NTuple{D,VectorElement})\n\nReturns the discrete modified L^2 norm of the grid function uₕ. It also accepts a NTuple of VectorElements.\n\nFor VectorElements uₕ, it is defined as\n\nVert textrmu_h Vert_+ = sqrt(textrmu_htextrmu_h)_+\n\nand for NTuples of VectorElements it returns\n\nVert textrmu_h Vert_+ vcentcolon = sqrt sum_i=1^D(textrmu_hitextrmu_hi)_+x_i\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.snorm₁ₕ","page":"API","title":"Bramble.snorm₁ₕ","text":"snorm₁ₕ(uₕ::VectorElement)\n\nReturns the discrete version of the standard H^1 seminorm of VectorElement uₕ.\n\ntextrmu_h_1h vcentcolon = Vert nabla_h textrmu_h Vert_h\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.norm₁ₕ","page":"API","title":"Bramble.norm₁ₕ","text":"norm₁ₕ(uₕ::VectorElement)\n\nReturns the discrete version of the standard H^1 norm of VectorElement uₕ.\n\nVert textrmu_h Vert_1h vcentcolon = sqrt Vert textrmu_h Vert_h^2 +  Vert nabla_h textrmu_h Vert_h^2   \n\n\n\n\n\n","category":"function"},{"location":"api/#Linear-and-bilinear-forms","page":"API","title":"Linear and bilinear forms","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"form\nassemble\nassemble!\nconstraints\nsymmetrize!","category":"page"},{"location":"api/#Bramble.form","page":"API","title":"Bramble.form","text":"form(Wₕ::SpaceType, Vₕ::SpaceType, f)\n\nReturns a bilinear form from a given expression and trial and test spaces.\n\n\n\n\n\nform(Wₕ::SType, f::F)\n\nReturns a linear form from a given expression and a test space.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.assemble","page":"API","title":"Bramble.assemble","text":"assemble(a::BilinearForm)\n\nReturns the assembled matrix of a bilinear form.\n\n\n\n\n\nassemble(a::BilinearForm, bcs::Constraints)\n\nReturns the assembled matrix of a bilinear form with imposed constraints.\n\n\n\n\n\nassemble(l::LinearForm)\n\nReturns the assembled linear form as a vector.\n\n\n\n\n\nassemble(l::LinearForm, bcs::Constraints)\n\nReturns the assembled linear form with imposed constraints as a vector of numbers.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.assemble!","page":"API","title":"Bramble.assemble!","text":"assemble!(A::AbstractMatrix, a::BilinearForm)\n\nCopies the assembled matrix of a bilinear form to a given matrix.\n\n\n\n\n\nassemble!(A::AbstractMatrix, a::BilinearFormType, bcs::Constraints)\n\nCopies the assembled matrix of a bilinear form with imposed constraints to a given matrix.\n\n\n\n\n\nassemble!(x::AbstractVector, l::LinearForm)\n\nIn-place assemble of a linear form into a given vector.\n\n\n\n\n\nassemble!(x::VectorElement, l::LinearForm)\n\nIn-place assemble of a linear form into a given VectorElement.\n\n\n\n\n\nassemble!(vec::AbstractVector, l::LinearForm, bcs::Constraints)\n\nIn-place assemble of a linear form with imposed constraints into a given vector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.constraints","page":"API","title":"Bramble.constraints","text":"constraints(pairs::NTuple{D,MarkerType}, type::Symbol = :dirichlet)\n\nReturns a Constraints object from a tuple of Markers and a symbol defining the type of boundary condition. Currently, the only supported type is for Dirichlet boundary conditions. The default type is :dirichlet.\n\n\n\n\n\nconstraints(f::BrambleBareFunction; type::Symbol = :dirichlet)\n\nReturns a Constraints object from a single BrambleBareFunction and a symbol defining the type of boundary condition.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bramble.symmetrize!","page":"API","title":"Bramble.symmetrize!","text":"symmetrize!(A, F, bcs::Constraints, Ωₕ::MeshType)\n\nAfter Dirichlet boundary conditions are applied to matrix A and vector F using the Constraints object bcs, this function allows to make A symmetric, if the original matrix (before applying boundary conditions was symmetric). The algorithm goes as follows: for any given row i where Dirichlet boundary conditions have been applied\n\n- calculate `dᵢ = cᵢ .* F`, where `cᵢ` is the `i`-th column of `A`;\n- replace `F` by substracting `dᵢ` to `F` (except for the `i`-th component)\n- replace all elements in the `i`-th column of `A` (except the `i`-th by zero).\n\n\n\n\n\n","category":"function"},{"location":"internals/geometry/","page":"Geometry","title":"Geometry","text":"CollapsedDocStrings = false","category":"page"},{"location":"internals/geometry/#Geometry","page":"Geometry","title":"Geometry","text":"","category":"section"},{"location":"internals/geometry/","page":"Geometry","title":"Geometry","text":"Modules = [Bramble]\nPublic = false\nPages = [\"sets.jl\", \"domains.jl\"]","category":"page"},{"location":"internals/geometry/#Bramble.BrambleBareFunction","page":"Geometry","title":"Bramble.BrambleBareFunction","text":"struct BrambleBareFunction{D,T,has_cart} \n\tf_tuple::FunctionWrapper{T, Tuple{NTuple{D,T}}}\n\tf_cartesian::FunctionWrapper{T, Tuple{CartesianIndex{D}}}\nend\n\nStructure to wrap around functions to make them more type agnostic. It uses FunctionWrappers to provide functions calculated on Tuples and CartesianIndices. The type arguments are D, the dimension of the underlying domain in which the function is defined, f_tuple, a version of the function appliable to Tuples and f_cartesian, a version of the function appliable to CartesianIndices (useful when dealing with meshes)\n\n\n\n\n\n","category":"type"},{"location":"internals/geometry/#Bramble.CartesianProduct","page":"Geometry","title":"Bramble.CartesianProduct","text":"struct CartesianProduct{D,T}\n\tdata::NTuple{D,Tuple{T,T}}\nend\n\nType for storage of cartesian products of D intervals having elements of type T.\n\n\n\n\n\n","category":"type"},{"location":"internals/geometry/#Bramble.CartesianProduct-Tuple{Any}","page":"Geometry","title":"Bramble.CartesianProduct","text":"(X::CartesianProduct)(i)\n\nReturns the i-th interval in the CartesianProduct.\n\n\n\n\n\n","category":"method"},{"location":"internals/geometry/#Base.eltype-Union{Tuple{Bramble.CartesianProduct{D, T}}, Tuple{T}, Tuple{D}} where {D, T}","page":"Geometry","title":"Base.eltype","text":"eltype(X::CartesianProduct)\neltype(::Type{<:CartesianProduct})\n\nReturns the element type of a CartesianProduct.\n\nExample\n\njulia> X = cartesianproduct(0, 1); eltype(X)\nFloat64\n\n\n\n\n\n","category":"method"},{"location":"internals/geometry/#Bramble.dim-Union{Tuple{Bramble.CartesianProduct{D}}, Tuple{D}} where D","page":"Geometry","title":"Bramble.dim","text":"dim(X::CartesianProduct)\ndim(::Type{<:CartesianProduct})\n\nReturns the topological dimension of a CartesianProduct.\n\nExample\n\njulia> X = cartesianproduct(0, 1); dim(X)\n1\n\njulia> Y = cartesianproduct(((0,1), (4,5))); dim(Y)\n2\n\n\n\n\n\n","category":"method"},{"location":"internals/geometry/#Bramble.projection-Tuple{Bramble.CartesianProduct, Any}","page":"Geometry","title":"Bramble.projection","text":"projection(X::CartesianProduct, i)\n\nReturns the i-th interval in CartesianProduct X as a new 1-dimensional CartesianProduct.\n\nExample\n\njulia> X = cartesianproduct(0, 1) × cartesianproduct(4, 5); projection(X, 1)\nType: Float64 \n Dim: 1 \n Set: [0.0, 1.0]\n\n\n\n\n\n","category":"method"},{"location":"internals/geometry/#Bramble.tails-Tuple{Bramble.CartesianProduct, Any}","page":"Geometry","title":"Bramble.tails","text":"tails(X::CartesianProduct, i)\ntails(X::CartesianProduct{D})\n\nReturns i-th interval in CartesianProduct X as a Tuple. It can also be called on X, returning aD-tuple with all intervals defining [CartesianProduct](@ref)X`.\n\nExample\n\njulia> X = cartesianproduct(0, 1) × cartesianproduct(4, 5); tails(X,1)\n(0.0, 1.0)\n\njulia> X = cartesianproduct(0, 1) × cartesianproduct(4, 5); tails(X)\n((0.0, 1.0), (4.0, 5.0))\n\n\n\n\n\n","category":"method"},{"location":"internals/geometry/#Bramble.Domain","page":"Geometry","title":"Bramble.Domain","text":"struct Domain{SetType, MarkersType}\n\tset::SetType\n\tmarkers::MarkersType\nend\n\nStructure to represent a domain composed of a CartesianProduct and a set of Markers.\n\n\n\n\n\n","category":"type"},{"location":"internals/geometry/#Bramble.Marker","page":"Geometry","title":"Bramble.Marker","text":"struct Marker{F}\n\tlabel::Symbol\n\tf::F\nend\n\nStructure to implement markers for a portion of a domain or even boundary conditions. Each Marker is composed of a symbol and a BrambleBareFunction.\n\n\n\n\n\n","category":"type"},{"location":"internals/geometry/#Base.eltype-Tuple{Bramble.Domain}","page":"Geometry","title":"Base.eltype","text":"eltype(Ω::Domain)\neltype(::Type{<:Domain{SetType}})\n\nReturns the type of the bounds defining Domain Ω.\n\nExample\n\njulia> I = interval(0.0, 1.0); eltype(domain(I × I))\nFloat64\n\n\n\n\n\n","category":"method"},{"location":"internals/geometry/#Bramble.dim-Tuple{Bramble.Domain}","page":"Geometry","title":"Bramble.dim","text":"dim(Ω::Domain)\ndim(::Type{<:Domain})\n\nReturns the topological dimension of the Domain Ω.\n\nExample\n\njulia> I = interval(0.0, 1.0); dim(domain(I × I))\n2\n\n\n\n\n\n","category":"method"},{"location":"internals/geometry/#Bramble.marker_funcs-Tuple{Bramble.Domain}","page":"Geometry","title":"Bramble.marker_funcs","text":"marker_funcs(Ω::Domain)\n\nReturns a generator with the Marker's BrambleBareFunctions associated with Domain Ω.\n\n\n\n\n\n","category":"method"},{"location":"internals/geometry/#Bramble.projection-Tuple{Bramble.Domain, Any}","page":"Geometry","title":"Bramble.projection","text":"projection(Ω::Domain, i)\n\nReturns the i-th 1-dimensional CartesianProduct of the set associated with Domain Ω.\n\nFor example, projection(domain(I × I), 1) will return I.\n\n\n\n\n\n","category":"method"},{"location":"internals/geometry/#Bramble.set-Tuple{Bramble.Domain}","page":"Geometry","title":"Bramble.set","text":"set(Ω::Domain)\n\nReturns the CartesianProduct associated with the Domain Ω.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/","page":"Mesh","title":"Mesh","text":"CollapsedDocStrings = false","category":"page"},{"location":"internals/mesh/#Mesh","page":"Mesh","title":"Mesh","text":"","category":"section"},{"location":"internals/mesh/","page":"Mesh","title":"Mesh","text":"Modules = [Bramble]\nPublic = false\nPages = [\"common.jl\", \"mesh1d.jl\", \"meshnd.jl\"]","category":"page"},{"location":"internals/mesh/#Bramble.MeshMarkers","page":"Mesh","title":"Bramble.MeshMarkers","text":"MeshMarkers{D}\n\nType of dictionary to store the CartesianIndices associated with a Marker.\n\n\n\n\n\n","category":"type"},{"location":"internals/mesh/#Bramble.MeshType","page":"Mesh","title":"Bramble.MeshType","text":" MeshType{D}\n\nAbstract type for meshes. Meshes are only parametrized by their topological dimension D`.\n\n\n\n\n\n","category":"type"},{"location":"internals/mesh/#Base.eltype-Tuple{Bramble.MeshType}","page":"Mesh","title":"Base.eltype","text":"eltype(Ωₕ::MeshType)\neltype(::Type{<:MeshType})\n\nReturns the type of element of the points of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble._i2p-Union{Tuple{T}, Tuple{D}, Tuple{Tuple{Vararg{Vector{T}, D}}, CartesianIndex{D}}} where {D, T}","page":"Mesh","title":"Bramble._i2p","text":"_i2p(pts::NTuple{D, Vector{T}}, index::CartesianIndex{D})\n\nReturns a D tuple with the coordinates of the point in pts associated with the CartesianIndex given by ìndex`.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.dim-Union{Tuple{Bramble.MeshType{D}}, Tuple{D}} where D","page":"Mesh","title":"Bramble.dim","text":"dim(Ωₕ::MeshType)\ndim(::Type{<:MeshType})\n\nReturns the tolopogical dimension of Ωₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.indices-Union{Tuple{Bramble.MeshType{D}}, Tuple{D}} where D","page":"Mesh","title":"Bramble.indices","text":"indices(Ωₕ::MeshType)\n\nReturns the CartesianIndices associated with the points of mesh Ωₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.marker-Tuple{Bramble.MeshType, Symbol}","page":"Mesh","title":"Bramble.marker","text":"marker(Ωₕ::MeshType, str::Symbol)\n\nReturns the Marker function with label str.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.Mesh1D","page":"Mesh","title":"Bramble.Mesh1D","text":"struct Mesh1D{T} <: MeshType{1}\n\tmarkers::MeshMarkers{1}\n\tindices::CartesianIndices{1}\n\tpts::Vector{T}\n\tnpts::Int\nend\n\nStructure to create a 1D mesh with npts points of type T. The points that define the mesh are stored in pts and are identified, following the same order, with the indices in indices. The variable markers stores, for each Domain marker, the indices satisfying f(x_i)=0, where f is the marker's function.\n\nFor future reference, the npts entries of vector pts are\n\nx_i  i=1dotsN\n\n\n\n\n\n","category":"type"},{"location":"internals/mesh/#Bramble.boundary_indices-Tuple{Bramble.Mesh1D}","page":"Mesh","title":"Bramble.boundary_indices","text":"boundary_indices(Ωₕ::Mesh1D)\n\nReturns the indices of the boundary points of mesh Ωₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.cell_measure-Tuple{Bramble.Mesh1D, Any}","page":"Mesh","title":"Bramble.cell_measure","text":"cell_measure(Ωₕ::Mesh1D, i)\ncell_measure(Ωₕ::Mesh1D, Iterator)\n\nReturns the measure of the cell\n\nsquare_i vcentcolon = leftx_i - frach_i2 x_i + frach_i+12 right\n\nat CartesianIndex i in mesh Ωₕ, which is given by h_i+12. If the second argument Iterator is supplied, the function returns a generator iterating over all cell measures.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.generate_indices-Tuple{Int64}","page":"Mesh","title":"Bramble.generate_indices","text":"generate_indices(npts::Int)\n\nReturns a CartesianIndices object for a vector of length npts.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.half_points-Union{Tuple{T}, Tuple{Bramble.Mesh1D{T}, Any}} where T","page":"Mesh","title":"Bramble.half_points","text":"half_points(Ωₕ::Mesh1D, i)\nhalf_points(Ωₕ::Mesh1D, Iterator)\n\nReturns the average of two neighboring, x_i+12, points in mesh Ωₕ, at index i. If the second argument Iterator is supplied, the function returns a generator iterating over all half points.\n\nx_i+12 vcentcolon = x_i + frach_i+12  i=1dotsN-1\n\nx_N+12 vcentcolon = x_N and x_12 vcentcolon = x_1.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.half_spacing-Union{Tuple{T}, Tuple{Bramble.Mesh1D{T}, Any}} where T","page":"Mesh","title":"Bramble.half_spacing","text":"half_spacing(Ωₕ::Mesh1D, i)\nhalf_spacing(Ωₕ::Mesh1D, Iterator)\n\nReturns the indexwise average of the space stepsize, h_i+12, at index i in mesh Ωₕ. If the second argument Iterator is supplied, the function returns a generator iterating over all half spacings.\n\nh_i+12 vcentcolon = frach_i + h_i+12  i=1dotsN-1\n\nh_N+12 vcentcolon = frach_N2 and h_12 vcentcolon = frach_12.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.interior_indices-Tuple{Bramble.Mesh1D}","page":"Mesh","title":"Bramble.interior_indices","text":"interior_indices(Ωₕ::Mesh1D)\n\nReturns the indices of the interior points of mesh Ωₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.npoints-Tuple{Bramble.Mesh1D}","page":"Mesh","title":"Bramble.npoints","text":"npoints(Ωₕ::Mesh1D)\nnpoints(Ωₕ::Mesh1D, Tuple)\n\nReturns the number of points x_i in Ωₕ. If the second argument is passed, it returns the same information as a 1-tuple.\n\nExample\n\njulia> Ωₕ = mesh(domain(interval(0,1)), 10, true); npoints(Ωₕ)\n10\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.spacing-Tuple{Bramble.Mesh1D, Any}","page":"Mesh","title":"Bramble.spacing","text":"spacing(Ωₕ::Mesh1D, i)\nspacing(Ωₕ::Mesh1D, Iterator)\n\nReturns the space stepsize, h_i at index i in mesh Ωₕ. If the second argument Iterator is supplied, the function returns a generator iterating over all spacings.\n\nh_i vcentcolon = x_i - x_i-1  i=2dotsN\n\nand h_1 vcentcolon = x_2 - x_1.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.MeshnD","page":"Mesh","title":"Bramble.MeshnD","text":"struct MeshnD{n,T} <: MeshType{n}\n\tmarkers::MeshMarkers{n}\n\tindices::CartesianIndices{n,NTuple{n,UnitRange{Int}}}\n\tsubmeshes::NTuple{n,Mesh1D{T}}\nend\n\nStructure to store a cartesian nD-mesh (2 leq n leq 3) with points of type T. For efficiency, the mesh points are not stored. Instead, we store the points of the 1D meshes that make up the nD mesh. To connect both nD and 1D meshes, we use the indices in indices. The Domain markers are translated to markers as for Mesh1D.\n\n\n\n\n\n","category":"type"},{"location":"internals/mesh/#Bramble.MeshnD-Tuple{Any}","page":"Mesh","title":"Bramble.MeshnD","text":"(Ωₕ::MeshnD)(i)\n\nReturns the i-th submesh of Ωₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.boundary_indices-Tuple{Bramble.MeshnD}","page":"Mesh","title":"Bramble.boundary_indices","text":"boundary_indices(Ωₕ::MeshnD)\n\nReturns the boundary indices of mesh Ωₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.cell_measure-Union{Tuple{T}, Tuple{D}, Tuple{Bramble.MeshnD{D, T}, Any}} where {D, T}","page":"Mesh","title":"Bramble.cell_measure","text":"cell_measure(Ωₕ::MeshnD, idx)\n\nReturns the measure of the cell square_idx centered at the index idx (can be a CartesianIndex or a Tuple):\n\n2D mesh\n\n  square_ij vcentcolon = leftx_i - frach_xi2 x_i + frach_xi+12 right times lefty_j - frach_yj2 y_j + frach_yj+12 right\n\nwith area h_xi+12 h_yj+12, where idx = (ij),\n\n3D mesh\n\nsquare_ijl vcentcolon = leftx_i - frach_xi2 x_i + frach_xi+12right times lefty_j - frach_yj2 y_j + frach_yj+12right times leftz_l - frach_zl2 z_l + frach_zl+12right\n\nwith volume h_xi+12 h_yj+12 h_zl+12, where idx = (ijl).\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.generate_indices-Union{Tuple{Tuple{Vararg{Int64, D}}}, Tuple{D}} where D","page":"Mesh","title":"Bramble.generate_indices","text":"generate_indices(nPoints::NTuple)\n\nReturns the CartesianIndices of a mesh with nPoints[i] in each direction.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.half_points-Union{Tuple{D}, Tuple{Bramble.MeshnD{D}, Any}} where D","page":"Mesh","title":"Bramble.half_points","text":"half_points(Ωₕ::MeshnD{D}, idx)\nhalf_points(Ωₕ::MeshnD{D}, Iterator)\n\nReturns a tuple with the half_points, for each submesh, of the points at index idx. If Iterator is passed as the second argument, a generator iterating over all half_points of the mesh is returned.\n\n2D mesh, with idx = (ij)\n\n(x_i+12 y_j+12)\n\n3D mesh, with idx = (ijl)\n\n(x_i+12 y_j+12 z_l+12)\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.half_spacing-Union{Tuple{D}, Tuple{Bramble.MeshnD{D}, Any}} where D","page":"Mesh","title":"Bramble.half_spacing","text":"half_spacing(Ωₕ::MeshnD, idx)\nhalf_spacing(Ωₕ::MeshnD{D}, Iterator)\n\nReturns a tuple with the half_spacing, for each submesh, at index idx. If Iterator is passed as the second argument, a generator iterating over all half_spacings of the mesh is returned.\n\n2D mesh, with idx = (ij)\n\n(h_xi+12 h_yj+12)\n\n3D mesh, with idx = (ijl)\n\n(h_xi+12 h_yj+12 h_zl+12)\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.interior_indices-Tuple{Bramble.MeshnD}","page":"Mesh","title":"Bramble.interior_indices","text":"interior_indices(Ωₕ::MeshnD)\n\nReturns the interior indices of mesh Ωₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.is_boundary_index-Union{Tuple{D}, Tuple{Any, CartesianIndices{D, R} where R<:Tuple{Vararg{OrdinalRange{Int64, Int64}, D}}}} where D","page":"Mesh","title":"Bramble.is_boundary_index","text":"is_boundary_index(idx, R::CartesianIndices)\n\nReturns true if the index idx is a boundary index of the mesh with indices stored in R.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.npoints-Tuple{Bramble.MeshnD}","page":"Mesh","title":"Bramble.npoints","text":"npoints(Ωₕ::MeshnD)\nnpoints(Ωₕ::MeshnD, Tuple)\n\nReturns the number of points of mesh Ωₕ. If Tuple is passed as the second argument, it returns a tuple with the number of points of each submesh composing Ωₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/mesh/#Bramble.spacing-Union{Tuple{D}, Tuple{Bramble.MeshnD{D}, Any}} where D","page":"Mesh","title":"Bramble.spacing","text":"spacing(Ωₕ::MeshnD, idx::NTuple)\nspacing(Ωₕ::MeshnD{D}, Iterator)\n\nReturns a tuple with the spacing, for each submesh, at index idx. If Iterator is passed as the second argument, a generator iterating over all spacings of the mesh is returned.\n\n2D mesh, with idx = (ij)\n\n(h_xi h_yj) vcentcolon = (x_i - x_i-1 y_j - y_j-1)\n\n3D mesh, with idx = (ijl)\n\n(h_xi h_yj h_zl) vcentcolon = (x_i - x_i-1 y_j - y_j-1 z_l - z_l-1)\n\n\n\n\n\n","category":"method"},{"location":"internals/forms/","page":"Forms","title":"Forms","text":"CollapsedDocStrings = false","category":"page"},{"location":"internals/forms/#Forms","page":"Forms","title":"Forms","text":"","category":"section"},{"location":"internals/forms/","page":"Forms","title":"Forms","text":"Modules = [Bramble]\nPublic = false\nPages = [\"linearforms.jl\", \"bilinearforms.jl\", \"constraints.jl\"]","category":"page"},{"location":"internals/forms/#Bramble.BilinearForm","page":"Forms","title":"Bramble.BilinearForm","text":"struct BilinearForm{TrialType,TestType,F} <: BilinearFormType\n\ttrial_space::TrialType\n\ttest_space::TestType\n\tform_expr::F\nend\n\nStructure to store the data associated with a bilinear form\n\nbeginarrayrcll\na colon  W_h times V_h longrightarrow mathbbR \n\t\t         (uv)     longmapsto  a(uv)\nendarray\n\nThe field form_expr has the expression of the form and the remaining fields store the trial and test spaces W_h and V_h.\n\n\n\n\n\n","category":"type"},{"location":"internals/forms/#Bramble.BilinearFormType","page":"Forms","title":"Bramble.BilinearFormType","text":"BilinearFormType\n\nAbstract type for bilinear forms.\n\n\n\n\n\n","category":"type"},{"location":"internals/forms/#Bramble.LinearForm","page":"Forms","title":"Bramble.LinearForm","text":"struct LinearForm{TestType,F} <: LinearFormType\n\ttest_space::TestType\n\tform_expr::F\nend\n\nStructure to store the data associated with a llinear form\n\nbeginarrayrcll\nl colon  W_h longrightarrow mathbbR \n\t\t    v  longmapsto  l(v)\nendarray\n\nThe field form_expr has the expression of the form and the remaining field stores the test space W_h.\n\n\n\n\n\n","category":"type"},{"location":"internals/forms/#Bramble.LinearFormType","page":"Forms","title":"Bramble.LinearFormType","text":"LinearFormType\n\nAbstract type for linear forms.\n\n\n\n\n\n","category":"type"},{"location":"internals/forms/#Bramble.testspace-Tuple{Bramble.BilinearFormType}","page":"Forms","title":"Bramble.testspace","text":"testspace(a::BilinearForm)\n\nReturns the test space of a bilinear form.\n\n\n\n\n\n","category":"method"},{"location":"internals/forms/#Bramble.testspace-Tuple{Bramble.LinearForm}","page":"Forms","title":"Bramble.testspace","text":"testspace(a::LinearForm)\n\nReturns the test space of a linear form.\n\n\n\n\n\n","category":"method"},{"location":"internals/forms/#Bramble.trialspace-Tuple{Bramble.BilinearFormType}","page":"Forms","title":"Bramble.trialspace","text":"trialspace(a::BilinearForm)\n\nReturns the trial space of a bilinear form.\n\n\n\n\n\n","category":"method"},{"location":"internals/forms/#Bramble.Constraints","page":"Forms","title":"Bramble.Constraints","text":"struct Constraints{D,FType} <: ConstraintsType\n\tmarkers::NTuple{D,Marker{FType}}\n\tconstraint_type::Symbol\nend\n\nStructure to store boundary constraints. The constraint_type should be a symbol identifying the type of conditions (currently, only :dirichlet is supported). The tuple markers stores all the Markers informations related with the constraints.\n\n\n\n\n\n","category":"type"},{"location":"internals/forms/#Bramble.ConstraintsType","page":"Forms","title":"Bramble.ConstraintsType","text":"ConstraintsType\n\nAbstract type for boundary conditions contraints.\n\n\n\n\n\n","category":"type"},{"location":"internals/forms/#Bramble.__set_diag_one-Tuple{AbstractMatrix, Any, Any}","page":"Forms","title":"Bramble.__set_diag_one","text":"__set_diag_one(A::AbstractMatrix, npts, rows)\n\nSet the diagonal elements of matrix A to one for the given rows.\n\n\n\n\n\n","category":"method"},{"location":"internals/forms/#Bramble.__set_rows_zero-Tuple{AbstractMatrix, Any, Any}","page":"Forms","title":"Bramble.__set_rows_zero","text":"__set_rows_zero(A::AbstractMatrix, npts, rows)\n\nSet the elements of matrix A to zero for the given rows.\n\n\n\n\n\n","category":"method"},{"location":"internals/forms/#Bramble._apply_dirichlet_bc!-Tuple{AbstractMatrix, Any, Any}","page":"Forms","title":"Bramble._apply_dirichlet_bc!","text":"_apply_dirichlet_bc!(A::AbstractMatrix, npts, rows)\n\nApply Dirichlet boundary conditions to matrix A for the given rows`.\n\n\n\n\n\n","category":"method"},{"location":"internals/forms/#Bramble.apply_dirichlet_bc!-Tuple{AbstractMatrix, Bramble.Constraints, Bramble.MeshType}","page":"Forms","title":"Bramble.apply_dirichlet_bc!","text":"apply_dirichlet_bc!(A, bcs::Constraints, M::MeshType)\n\nApply Dirichlet boundary conditions to matrix A using the Constraints object bcs and the mesh M. For each index i associated with a Dirichlet boundary condition, we set the i-th row of matrix A to zero and change the diagonal element A[i,i] to 1.\n\n\n\n\n\n","category":"method"},{"location":"internals/forms/#Bramble.apply_dirichlet_bc!-Union{Tuple{T}, Tuple{D}, Tuple{N}, Tuple{AbstractVector, Bramble.Constraints{N, Bramble.BrambleBareFunction{D, T, true}}, Any}} where {N, D, T}","page":"Forms","title":"Bramble.apply_dirichlet_bc!","text":"apply_dirichlet_bc!(v::AbstractVector, bcs::Constraints, Ωₕ::MeshType)\n\nApply Dirichlet boundary conditions to vector v using the Constraints object bcs and the mesh Ωₕ.\n\n\n\n\n\n","category":"method"},{"location":"internals/forms/#Bramble.constraint_type-Tuple{Bramble.Constraints}","page":"Forms","title":"Bramble.constraint_type","text":"constraint_type(bcs::Constraints)\n\nReturns the symbol defining the type of boundary condition stored in the Constraints object bcs.\n\n\n\n\n\n","category":"method"},{"location":"internals/forms/#Bramble.symbols-Tuple{Bramble.Constraints}","page":"Forms","title":"Bramble.symbols","text":"symbols(bcs::Constraints)\n\nReturns an iterator over the symbols of the Markers stored in the Constraints object bcs.\n\n\n\n\n\n","category":"method"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"CurrentModule = Bramble","category":"page"},{"location":"examples/poisson_nonlinear/#Nonlinear-Poisson-equation","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"","category":"section"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"In this section, we'll demonstrate how to utilize Bramble.jl to solve a nonlinear Poisson equation with Dirichlet boundary conditions.","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"","category":"page"},{"location":"examples/poisson_nonlinear/#Problem-description","page":"Nonlinear Poisson equation","title":"Problem description","text":"","category":"section"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"Let's consider the following nonlinear Poisson equation on a 1-dimensional square domain Omega = 01,","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"beginalign*\n- fracpartialpartial x left( alpha(u) fracpartial upartial x (x) right) = f(x)  x in Omega \nu(x) = g(x)  x in partial Omega\nendalign*","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"We define","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"alpha (u) = 3 + frac1  1 + u^2","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"and","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"u(xy) = e^x + y  (xy) in 01^2","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"Function f and g are calculated such that u is the exact solution of the problem.","category":"page"},{"location":"examples/poisson_nonlinear/#Discretization","page":"Nonlinear Poisson equation","title":"Discretization","text":"","category":"section"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"We refer to Linear Poisson equation for most of the notations used. To discretize the problem above, we just need to introduce an averaging operator on grid functions","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"M_h (u_h)(x_i) = fracu_h(x_i) + u_h(x_i-1)2","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"This allows to discretize the differential problem as the following variational problem","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"find u_h in W_h(overlineOmega_h), with u_h(x_i) = u(x_i) on partial overlineOmega_h such that(alpha(u_h) D_-x u_h D_-x v_h)_+ = ((g)_h v_h)_h  forall v_h  in W_h0(overlineOmega_h)","category":"page"},{"location":"examples/poisson_nonlinear/#Implementation","page":"Nonlinear Poisson equation","title":"Implementation","text":"","category":"section"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"To solve this nonlinear problem, we can use a standard fixed point iteration.","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"We start by loading the packages needed","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"using Bramble\nusing LinearSolve\nusing ILUZero      # for reusable sparsity pattern","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"and define the domain and relevant functions to the problem","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"I = interval(0, 1)\nΩ = domain(I)\n\nsol = @embed(Ω, x -> exp(x[1]))\ncoeff = @embed(I, u -> 3 + 1 / (1 + u[1]^2))\nAp = @embed(I, u -> -2 * u[1] / (1 + u[1]^2)^2)\ng = @embed(Ω, x -> -d * Ap(sol(x)) * sol(x)^2 - d * A(sol(x)) * sol(x))","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"Next, we define a mesh and reinterpret the solution and right hand side functions as being defined on the mesh.","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"Mh = mesh(Ω, (10, 20), (true, false))\nsol = @embed(Mh, sol)\nrhs = @embed(Mh, rhs)\nbc = dirichletbcs(sol)","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"Now we define the space of grid functions and do some calculations for the right hand side","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"Wh = gridspace(Mh)\nu = element(Wh, 0)\n\nuold = similar(u)\navgₕ!(uold, rhs)","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"Next, we introduce the linear and bilinear forms associated with the problem. Here we use a uold vector which is due the linearization of the nonlinear function we had before.","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"l(V) = innerₕ(uold, V)\nlform = form(l, Wh)\nF = assemble(lform, bc)\n\nA(u) = D == 1 ? coeff.(M₋ₕ(u)) : sum(ntuple(i -> coeff.(M₋ₕ(u)[i]), D)) ./ D\na(U, V) = inner₊(A(u) * ∇₋ₕ(U), ∇₋ₕ(V))\nbform = form(a, Wh, Wh)\nmat = assemble(bform, bc)","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"We are aiming at calculating the fixed point of","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"(alpha(u_h) D_-x u_h D_-x v_h)_+ = (u_h v_h)_h","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"by using the iterative scheme: given u_{h,0}, solve for n=1,\\dots","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"left(alpha(u_h^(n)) D_-x u_h D_-x v_h right)_+ = (u_h v_h)_h","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"This is basically implemented in the following function","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"function fixed_point!(A, F, bform, bc, uold, u, α)\n  prec = ilu0(A)\n  prob = LinearProblem(A, F, KrylovJL_GMRES(), Pl = prec)\n  linsolve = init(prob)\n\n  for i in 1:2000\n    uold.values .= α(u)\n    assemble!(A, bform, bc)\n\n    uold .= u\n\n    linsolve.A = A\n    sol = solve!(linsolve)\n\n    u.values .= sol.u\n    uold.values .-= u.values\n\n    if norm₁ₕ(uold) < 1e-10\n      break\n    end\n  end\nend","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"and we implemented a simple stopping criteria based on the norm₁ₕ of the the difference between two consecutive iterations. Finally, we just need to call the fixed point function and we are done","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"fixed_point!(mat, F, bform, bc, uold, u, A)\nu .-= uold","category":"page"},{"location":"examples/poisson_nonlinear/","page":"Nonlinear Poisson equation","title":"Nonlinear Poisson equation","text":"Vector u has the approximate solution to u_h.","category":"page"},{"location":"#Bramble.jl","page":"Home","title":"Bramble.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation is for Bramble.jl, a Julia library implementing discretization methods to solve partial differential equations using finite differences on nonuniform grids.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more information on the types of discretizations encompassed by Bramble.jl, please consult the papers","category":"page"},{"location":"","page":"Home","title":"Home","text":"J. A. Ferreira and R. D. Grigorieff, On the supraconvergence of elliptic finite difference schemes, Applied Numerical Mathematics 28 (1998), pp. 275-292\nS. Barbeiro, J. A. Ferreira and R. D. Grigorieff, Supraconvergence of a finite difference scheme for solutions in H^s(0L), IMA Journal of Numerical Analysis 25.4 (2005), pp. 797–811\nJ. A. Ferreira and R. D. Grigorieff, Supraconvergence and Supercloseness of a Scheme for Elliptic Equations on Nonuniform Grids, Numerical Functional Analysis and Optimization 27.5-6 (2006), pp. 539–564","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"CurrentModule = Bramble","category":"page"},{"location":"examples/poisson_linear/#Linear-Poisson-equation","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"","category":"section"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"In this section, we'll demonstrate how to utilize Bramble.jl to solve a linear Poisson equation with Dirichlet boundary conditions.","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"","category":"page"},{"location":"examples/poisson_linear/#Problem-description","page":"Linear Poisson equation","title":"Problem description","text":"","category":"section"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"Let's consider the following Poisson equation on a n-dimensional square domain (n=123),","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"beginalign*\n- Delta u (x) = f(x)  x in Omega \nu(x) = g(x)  x in partial Omega\nendalign*","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"where Omega = (ab)^n.","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"In order to have a working example of our Poisson problem we aim to solve, lets take n=2 and define","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"u(xy) = e^x + y  (xy) in 01^2","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"and calculate f and g accordingly.","category":"page"},{"location":"examples/poisson_linear/#Discretization","page":"Linear Poisson equation","title":"Discretization","text":"","category":"section"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"The former problem can be discretized with finite differences based on a nonuniform grid. We will now detail the mathematical tools needed to formalize our discretization method.","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"Let us denote by Lambda a sequence of vectors h=(h_x_1 h_x_2), where h_x = (h_x1 h_x2 dots h_xN_x), h_y = (h_y1 h_y2 dots h_yN_y) and h_xj h_yj 0. Let us denote by h_max the maximum over all values of h_xj and h_yj.","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"For each h in Lambda, we define the grid space","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"overlineOmega_h = set(x_i y_j) in mathbbR^2 x_0 = y_0 = 0 x_i = x_i-1 + h_xi i=1dotsN_x  y_j = x_j-1 + h_yj j=1dotsN_y ","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"We also denote by partial overlineOmega_h, the subset of grid points corresponding to the boundary partial Omega. Built upon these grids, we introduce the discrete spaces of grid functions","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"W_h(overlineOmega_h) = setu_h overlineOmega_h longrightarrow mathbbR","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"as well as W_h0(overlineOmega_h) subseteq W_h(overlineOmega_h), its subspace of function zero at the boundary.","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"Finally, we introduce some notations for functions u_h and v_h in W_h(overlineOmega_h)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"(u_hv_h)_h = sum_i=1^N_xsum_j=1^N_y square_ij u_h(x_i y_j) v_h(x_iy_j)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"(u_hv_h)_+x = sum_i=1^N_xsum_j=1^N_y-1 h_xi h_yj+12 u_h(x_i y_j) v_h(x_iy_j)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"(u_hv_h)_+y = sum_i=1^N_x-1sum_j=1^N_y h_xi+12 h_yj u_h(x_i y_j) v_h(x_iy_j)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"where square_ij = leftx_i-frach_xi2 x_i+frach_xi+12 right times lefty_j-frach_yj2 y_j+frach_yj+12 right, square_ij is its area and h_cdoti+12 = frach_cdoti-h_cdoti+12.","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"If D_-x and D_-y denote the standard backward difference operators defined on the grid points of overlineOmega_h, then, we can formulate the following discrete problem:","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"find u_h in W_h(overlineOmega_h), with u_h(x_iy_j) = u(x_iy_j) on partial overlineOmega_h such that(D_-xu_h D_-xv_h)_+x + (D_-yu_h D_-yu_h)_+y = ((g)_h v_h)_h  forall  v_h  in W_h0(overlineOmega_h)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"Here, the (cdot)_h operator is defined as follows","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"(g)_h (x_iy_j) = frac1square_ij iint_square_ij g(x) dxdy","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"This defines a discretization that can be seen both as a finite difference and finite element method. It can be shown that under certain smoothness assumptions on f and g, the former problem has a unique solution u_h such that","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"Vert R_h u - u_h Vert_1h leq C h_max^ 2","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"where","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"Vert v_h Vert_1h = sqrtVert v_h Vert_h^2 + Vert D_-x v_h Vert_hx^2 + Vert D_y v_h Vert_hy^2","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"and","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"beginaligned\nVert v_h Vert_h = sqrt(v_hv_h)_h\n Vert D_-x v_h Vert_hx = sqrt(D_-x v_h D_-x v_h)_+x\n Vert D_-y v_h Vert_hy = sqrt(D_-y v_h D_-y v_h)_+y\n endaligned","category":"page"},{"location":"examples/poisson_linear/#Implementation","page":"Linear Poisson equation","title":"Implementation","text":"","category":"section"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"We can now use Bramble.jl to calculate u_h. As with any Julia package, we start by importing Bramble.jl and a few other packages we will need down the line","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"using Bramble\nusing LinearSolve       # solvers for linear systems\nusing IncompleteLU: ilu # incomplete LU for preconditioning","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"We start by building a grid associated with the Poisson equation's domain, as well as, the solution (to impose Dirichlet boundary conditions) and the equation's right hand side g.","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"I = interval(0, 1)\nΩ = domain(I × I)\nΩₕ = mesh(Ω, (10, 20), (true, false))","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"The first two lines create a domain object, while the third generates a mesh with 10 and 20 points along the x and y directions, respectively. The last input argument encodes that we want a uniform grid in the x axis and random generated points in the y axis.","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"We now move on to prepare and define functions f and g associated with the problem as BrambleBareFunction. This is a needed step to prepare these function to work well the the internal machinery of Bramble.jl:","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"sol = @embed(Ωₕ, x -> exp(sum(x)))\nrhs = @embed(Ωₕ, x -> -2 * sol(x))","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"The next line of code builds a marker structure with the information the equation has a Dirichlet boundary condition over the boundary of Ωₕ (the whole boundary is the default option) defined by function sol.","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"bc = dirichletbcs(sol)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"We now build the gridspace and define the linear and bilinear forms associated with the discrete variational problem presented. We create the discrete space with","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"Wₕ = gridspace(Ωₕ)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"and move on to define the bilinear form and assembling the associated matrix","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"bform = form((uₕ, vₕ) -> inner₊(∇₋ₕ(uₕ), ∇₋ₕ(vₕ)), Wₕ, Wₕ)\nA = assemble(bform, bc)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"In this case, we provide to the assemble function the information on boundary conditions in order to have this information encoded in matrix A.","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"Next, we create an element in the gridspace whose components are calculated with the averaging operator introduced before","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"uₕ = element(Wₕ)\navgₕ!(uₕ, rhs)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"We now define the linear forms associated with the right hand side","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"lform = form(vₕ -> innerₕ(uₕ, vₕ), Wₕ)\nF = assemble(lform, bc)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"and assemble vector F. The solution of the linear system Ax=F will provide the components of vector uₕ, solution of the discrete variational problem. To solve the system, we use GMRES (package LinearSolve.jl) preconditioned with an incomplete LU factorization as precondition (package incompleteLU.jl)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"prob = LinearProblem(A, F)\nsolₕ = LinearSolve.solve(prob, KrylovJL_GMRES(), Pl = ilu(A, τ = 0.0001))\n\nuₕ .= solₕ.u","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"and calculate the solution. If we want to calculate the error associated with this approximate solution (w.r.t norm₁ₕ), we can follow with","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"F .= uₕ\nRₕ!(uₕ, sol)\nuₕ .-= F\n\nnorm₁ₕ(uₕ)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"We can even use GLMakie to plot the solution","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"using GLMakie\n\nx = points(Ωₕ(1))\ny = points(Ωₕ(2))\n\nreshaped_uₕ = reshape(uₕ, 10, 20)\n\nfig = Figure(size = (1200, 800))\nax1 = Axis(fig[1, 1], aspect = 1)\nax2 = Axis3(fig[1, 2], aspect = (1, 1, 1),\n      perspectiveness = 0.5,\n      elevation = π / 3.5,\n      azimuth = 0.1π)\n\nwireframe!(ax1, x, y, reshaped_uₕ) # mesh plot\nsurface!(ax2, x, y, reshaped_uₕ)   # solution plot","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"(Image: Mesh and approximate solution plots with GLMakie)","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"or export it to a vtk format to visualize, for instance, with Paraview.","category":"page"},{"location":"examples/poisson_linear/","page":"Linear Poisson equation","title":"Linear Poisson equation","text":"export_file = \"surf\"\nvtk_grid(export_file, x, y, z) do vtk\n    vtk[\"poisson\"] = vis_uₕ\nend\n\nvtk_save(vtk)","category":"page"}]
}
